
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model movie
 * 
 */
export type movie = $Result.DefaultSelection<Prisma.$moviePayload>
/**
 * Model order
 * 
 */
export type order = $Result.DefaultSelection<Prisma.$orderPayload>
/**
 * Model passwordresettoken
 * 
 */
export type passwordresettoken = $Result.DefaultSelection<Prisma.$passwordresettokenPayload>
/**
 * Model seatlock
 * 
 */
export type seatlock = $Result.DefaultSelection<Prisma.$seatlockPayload>
/**
 * Model showtime
 * 
 */
export type showtime = $Result.DefaultSelection<Prisma.$showtimePayload>
/**
 * Model ticket
 * 
 */
export type ticket = $Result.DefaultSelection<Prisma.$ticketPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model promotion
 * 
 */
export type promotion = $Result.DefaultSelection<Prisma.$promotionPayload>
/**
 * Model promotionredemption
 * 
 */
export type promotionredemption = $Result.DefaultSelection<Prisma.$promotionredemptionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Movies
 * const movies = await prisma.movie.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Movies
   * const movies = await prisma.movie.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.movie`: Exposes CRUD operations for the **movie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movies
    * const movies = await prisma.movie.findMany()
    * ```
    */
  get movie(): Prisma.movieDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.orderDelegate<ExtArgs>;

  /**
   * `prisma.passwordresettoken`: Exposes CRUD operations for the **passwordresettoken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Passwordresettokens
    * const passwordresettokens = await prisma.passwordresettoken.findMany()
    * ```
    */
  get passwordresettoken(): Prisma.passwordresettokenDelegate<ExtArgs>;

  /**
   * `prisma.seatlock`: Exposes CRUD operations for the **seatlock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seatlocks
    * const seatlocks = await prisma.seatlock.findMany()
    * ```
    */
  get seatlock(): Prisma.seatlockDelegate<ExtArgs>;

  /**
   * `prisma.showtime`: Exposes CRUD operations for the **showtime** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Showtimes
    * const showtimes = await prisma.showtime.findMany()
    * ```
    */
  get showtime(): Prisma.showtimeDelegate<ExtArgs>;

  /**
   * `prisma.ticket`: Exposes CRUD operations for the **ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.ticket.findMany()
    * ```
    */
  get ticket(): Prisma.ticketDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.promotion`: Exposes CRUD operations for the **promotion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Promotions
    * const promotions = await prisma.promotion.findMany()
    * ```
    */
  get promotion(): Prisma.promotionDelegate<ExtArgs>;

  /**
   * `prisma.promotionredemption`: Exposes CRUD operations for the **promotionredemption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Promotionredemptions
    * const promotionredemptions = await prisma.promotionredemption.findMany()
    * ```
    */
  get promotionredemption(): Prisma.promotionredemptionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    movie: 'movie',
    order: 'order',
    passwordresettoken: 'passwordresettoken',
    seatlock: 'seatlock',
    showtime: 'showtime',
    ticket: 'ticket',
    user: 'user',
    promotion: 'promotion',
    promotionredemption: 'promotionredemption'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "movie" | "order" | "passwordresettoken" | "seatlock" | "showtime" | "ticket" | "user" | "promotion" | "promotionredemption"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      movie: {
        payload: Prisma.$moviePayload<ExtArgs>
        fields: Prisma.movieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.movieFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moviePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.movieFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moviePayload>
          }
          findFirst: {
            args: Prisma.movieFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moviePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.movieFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moviePayload>
          }
          findMany: {
            args: Prisma.movieFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moviePayload>[]
          }
          create: {
            args: Prisma.movieCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moviePayload>
          }
          createMany: {
            args: Prisma.movieCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.movieCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moviePayload>[]
          }
          delete: {
            args: Prisma.movieDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moviePayload>
          }
          update: {
            args: Prisma.movieUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moviePayload>
          }
          deleteMany: {
            args: Prisma.movieDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.movieUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.movieUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moviePayload>
          }
          aggregate: {
            args: Prisma.MovieAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovie>
          }
          groupBy: {
            args: Prisma.movieGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovieGroupByOutputType>[]
          }
          count: {
            args: Prisma.movieCountArgs<ExtArgs>
            result: $Utils.Optional<MovieCountAggregateOutputType> | number
          }
        }
      }
      order: {
        payload: Prisma.$orderPayload<ExtArgs>
        fields: Prisma.orderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.orderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.orderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          findFirst: {
            args: Prisma.orderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.orderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          findMany: {
            args: Prisma.orderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>[]
          }
          create: {
            args: Prisma.orderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          createMany: {
            args: Prisma.orderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.orderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>[]
          }
          delete: {
            args: Prisma.orderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          update: {
            args: Prisma.orderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          deleteMany: {
            args: Prisma.orderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.orderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.orderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.orderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.orderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      passwordresettoken: {
        payload: Prisma.$passwordresettokenPayload<ExtArgs>
        fields: Prisma.passwordresettokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.passwordresettokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordresettokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.passwordresettokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordresettokenPayload>
          }
          findFirst: {
            args: Prisma.passwordresettokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordresettokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.passwordresettokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordresettokenPayload>
          }
          findMany: {
            args: Prisma.passwordresettokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordresettokenPayload>[]
          }
          create: {
            args: Prisma.passwordresettokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordresettokenPayload>
          }
          createMany: {
            args: Prisma.passwordresettokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.passwordresettokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordresettokenPayload>[]
          }
          delete: {
            args: Prisma.passwordresettokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordresettokenPayload>
          }
          update: {
            args: Prisma.passwordresettokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordresettokenPayload>
          }
          deleteMany: {
            args: Prisma.passwordresettokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.passwordresettokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.passwordresettokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordresettokenPayload>
          }
          aggregate: {
            args: Prisma.PasswordresettokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordresettoken>
          }
          groupBy: {
            args: Prisma.passwordresettokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordresettokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.passwordresettokenCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordresettokenCountAggregateOutputType> | number
          }
        }
      }
      seatlock: {
        payload: Prisma.$seatlockPayload<ExtArgs>
        fields: Prisma.seatlockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.seatlockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seatlockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.seatlockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seatlockPayload>
          }
          findFirst: {
            args: Prisma.seatlockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seatlockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.seatlockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seatlockPayload>
          }
          findMany: {
            args: Prisma.seatlockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seatlockPayload>[]
          }
          create: {
            args: Prisma.seatlockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seatlockPayload>
          }
          createMany: {
            args: Prisma.seatlockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.seatlockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seatlockPayload>[]
          }
          delete: {
            args: Prisma.seatlockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seatlockPayload>
          }
          update: {
            args: Prisma.seatlockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seatlockPayload>
          }
          deleteMany: {
            args: Prisma.seatlockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.seatlockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.seatlockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seatlockPayload>
          }
          aggregate: {
            args: Prisma.SeatlockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeatlock>
          }
          groupBy: {
            args: Prisma.seatlockGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeatlockGroupByOutputType>[]
          }
          count: {
            args: Prisma.seatlockCountArgs<ExtArgs>
            result: $Utils.Optional<SeatlockCountAggregateOutputType> | number
          }
        }
      }
      showtime: {
        payload: Prisma.$showtimePayload<ExtArgs>
        fields: Prisma.showtimeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.showtimeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showtimePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.showtimeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showtimePayload>
          }
          findFirst: {
            args: Prisma.showtimeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showtimePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.showtimeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showtimePayload>
          }
          findMany: {
            args: Prisma.showtimeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showtimePayload>[]
          }
          create: {
            args: Prisma.showtimeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showtimePayload>
          }
          createMany: {
            args: Prisma.showtimeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.showtimeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showtimePayload>[]
          }
          delete: {
            args: Prisma.showtimeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showtimePayload>
          }
          update: {
            args: Prisma.showtimeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showtimePayload>
          }
          deleteMany: {
            args: Prisma.showtimeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.showtimeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.showtimeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showtimePayload>
          }
          aggregate: {
            args: Prisma.ShowtimeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShowtime>
          }
          groupBy: {
            args: Prisma.showtimeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShowtimeGroupByOutputType>[]
          }
          count: {
            args: Prisma.showtimeCountArgs<ExtArgs>
            result: $Utils.Optional<ShowtimeCountAggregateOutputType> | number
          }
        }
      }
      ticket: {
        payload: Prisma.$ticketPayload<ExtArgs>
        fields: Prisma.ticketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          findFirst: {
            args: Prisma.ticketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          findMany: {
            args: Prisma.ticketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>[]
          }
          create: {
            args: Prisma.ticketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          createMany: {
            args: Prisma.ticketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ticketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>[]
          }
          delete: {
            args: Prisma.ticketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          update: {
            args: Prisma.ticketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          deleteMany: {
            args: Prisma.ticketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ticketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketPayload>
          }
          aggregate: {
            args: Prisma.TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket>
          }
          groupBy: {
            args: Prisma.ticketGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticketCountArgs<ExtArgs>
            result: $Utils.Optional<TicketCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      promotion: {
        payload: Prisma.$promotionPayload<ExtArgs>
        fields: Prisma.promotionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.promotionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.promotionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          findFirst: {
            args: Prisma.promotionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.promotionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          findMany: {
            args: Prisma.promotionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>[]
          }
          create: {
            args: Prisma.promotionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          createMany: {
            args: Prisma.promotionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.promotionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>[]
          }
          delete: {
            args: Prisma.promotionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          update: {
            args: Prisma.promotionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          deleteMany: {
            args: Prisma.promotionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.promotionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.promotionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          aggregate: {
            args: Prisma.PromotionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromotion>
          }
          groupBy: {
            args: Prisma.promotionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromotionGroupByOutputType>[]
          }
          count: {
            args: Prisma.promotionCountArgs<ExtArgs>
            result: $Utils.Optional<PromotionCountAggregateOutputType> | number
          }
        }
      }
      promotionredemption: {
        payload: Prisma.$promotionredemptionPayload<ExtArgs>
        fields: Prisma.promotionredemptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.promotionredemptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionredemptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.promotionredemptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionredemptionPayload>
          }
          findFirst: {
            args: Prisma.promotionredemptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionredemptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.promotionredemptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionredemptionPayload>
          }
          findMany: {
            args: Prisma.promotionredemptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionredemptionPayload>[]
          }
          create: {
            args: Prisma.promotionredemptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionredemptionPayload>
          }
          createMany: {
            args: Prisma.promotionredemptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.promotionredemptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionredemptionPayload>[]
          }
          delete: {
            args: Prisma.promotionredemptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionredemptionPayload>
          }
          update: {
            args: Prisma.promotionredemptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionredemptionPayload>
          }
          deleteMany: {
            args: Prisma.promotionredemptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.promotionredemptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.promotionredemptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionredemptionPayload>
          }
          aggregate: {
            args: Prisma.PromotionredemptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromotionredemption>
          }
          groupBy: {
            args: Prisma.promotionredemptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromotionredemptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.promotionredemptionCountArgs<ExtArgs>
            result: $Utils.Optional<PromotionredemptionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MovieCountOutputType
   */

  export type MovieCountOutputType = {
    showtime: number
  }

  export type MovieCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    showtime?: boolean | MovieCountOutputTypeCountShowtimeArgs
  }

  // Custom InputTypes
  /**
   * MovieCountOutputType without action
   */
  export type MovieCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCountOutputType
     */
    select?: MovieCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MovieCountOutputType without action
   */
  export type MovieCountOutputTypeCountShowtimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: showtimeWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    tickets: number
    promotionredemption: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | OrderCountOutputTypeCountTicketsArgs
    promotionredemption?: boolean | OrderCountOutputTypeCountPromotionredemptionArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountPromotionredemptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: promotionredemptionWhereInput
  }


  /**
   * Count Type ShowtimeCountOutputType
   */

  export type ShowtimeCountOutputType = {
    order: number
    seatlock: number
  }

  export type ShowtimeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | ShowtimeCountOutputTypeCountOrderArgs
    seatlock?: boolean | ShowtimeCountOutputTypeCountSeatlockArgs
  }

  // Custom InputTypes
  /**
   * ShowtimeCountOutputType without action
   */
  export type ShowtimeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowtimeCountOutputType
     */
    select?: ShowtimeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShowtimeCountOutputType without action
   */
  export type ShowtimeCountOutputTypeCountOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderWhereInput
  }

  /**
   * ShowtimeCountOutputType without action
   */
  export type ShowtimeCountOutputTypeCountSeatlockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: seatlockWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    orders: number
    passwordresettoken: number
    promotionredemption: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    passwordresettoken?: boolean | UserCountOutputTypeCountPasswordresettokenArgs
    promotionredemption?: boolean | UserCountOutputTypeCountPromotionredemptionArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPasswordresettokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: passwordresettokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPromotionredemptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: promotionredemptionWhereInput
  }


  /**
   * Count Type PromotionCountOutputType
   */

  export type PromotionCountOutputType = {
    redemptions: number
  }

  export type PromotionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    redemptions?: boolean | PromotionCountOutputTypeCountRedemptionsArgs
  }

  // Custom InputTypes
  /**
   * PromotionCountOutputType without action
   */
  export type PromotionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCountOutputType
     */
    select?: PromotionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PromotionCountOutputType without action
   */
  export type PromotionCountOutputTypeCountRedemptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: promotionredemptionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model movie
   */

  export type AggregateMovie = {
    _count: MovieCountAggregateOutputType | null
    _avg: MovieAvgAggregateOutputType | null
    _sum: MovieSumAggregateOutputType | null
    _min: MovieMinAggregateOutputType | null
    _max: MovieMaxAggregateOutputType | null
  }

  export type MovieAvgAggregateOutputType = {
    id: number | null
    durationMin: number | null
  }

  export type MovieSumAggregateOutputType = {
    id: bigint | null
    durationMin: number | null
  }

  export type MovieMinAggregateOutputType = {
    id: bigint | null
    title: string | null
    durationMin: number | null
    rating: string | null
    createdAt: Date | null
    posterUrl: string | null
    overview: string | null
    active: boolean | null
  }

  export type MovieMaxAggregateOutputType = {
    id: bigint | null
    title: string | null
    durationMin: number | null
    rating: string | null
    createdAt: Date | null
    posterUrl: string | null
    overview: string | null
    active: boolean | null
  }

  export type MovieCountAggregateOutputType = {
    id: number
    title: number
    durationMin: number
    rating: number
    createdAt: number
    posterUrl: number
    overview: number
    active: number
    _all: number
  }


  export type MovieAvgAggregateInputType = {
    id?: true
    durationMin?: true
  }

  export type MovieSumAggregateInputType = {
    id?: true
    durationMin?: true
  }

  export type MovieMinAggregateInputType = {
    id?: true
    title?: true
    durationMin?: true
    rating?: true
    createdAt?: true
    posterUrl?: true
    overview?: true
    active?: true
  }

  export type MovieMaxAggregateInputType = {
    id?: true
    title?: true
    durationMin?: true
    rating?: true
    createdAt?: true
    posterUrl?: true
    overview?: true
    active?: true
  }

  export type MovieCountAggregateInputType = {
    id?: true
    title?: true
    durationMin?: true
    rating?: true
    createdAt?: true
    posterUrl?: true
    overview?: true
    active?: true
    _all?: true
  }

  export type MovieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which movie to aggregate.
     */
    where?: movieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     */
    orderBy?: movieOrderByWithRelationInput | movieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: movieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned movies
    **/
    _count?: true | MovieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovieMaxAggregateInputType
  }

  export type GetMovieAggregateType<T extends MovieAggregateArgs> = {
        [P in keyof T & keyof AggregateMovie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovie[P]>
      : GetScalarType<T[P], AggregateMovie[P]>
  }




  export type movieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: movieWhereInput
    orderBy?: movieOrderByWithAggregationInput | movieOrderByWithAggregationInput[]
    by: MovieScalarFieldEnum[] | MovieScalarFieldEnum
    having?: movieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovieCountAggregateInputType | true
    _avg?: MovieAvgAggregateInputType
    _sum?: MovieSumAggregateInputType
    _min?: MovieMinAggregateInputType
    _max?: MovieMaxAggregateInputType
  }

  export type MovieGroupByOutputType = {
    id: bigint
    title: string
    durationMin: number
    rating: string | null
    createdAt: Date
    posterUrl: string | null
    overview: string | null
    active: boolean
    _count: MovieCountAggregateOutputType | null
    _avg: MovieAvgAggregateOutputType | null
    _sum: MovieSumAggregateOutputType | null
    _min: MovieMinAggregateOutputType | null
    _max: MovieMaxAggregateOutputType | null
  }

  type GetMovieGroupByPayload<T extends movieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovieGroupByOutputType[P]>
            : GetScalarType<T[P], MovieGroupByOutputType[P]>
        }
      >
    >


  export type movieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    durationMin?: boolean
    rating?: boolean
    createdAt?: boolean
    posterUrl?: boolean
    overview?: boolean
    active?: boolean
    showtime?: boolean | movie$showtimeArgs<ExtArgs>
    _count?: boolean | MovieCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movie"]>

  export type movieSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    durationMin?: boolean
    rating?: boolean
    createdAt?: boolean
    posterUrl?: boolean
    overview?: boolean
    active?: boolean
  }, ExtArgs["result"]["movie"]>

  export type movieSelectScalar = {
    id?: boolean
    title?: boolean
    durationMin?: boolean
    rating?: boolean
    createdAt?: boolean
    posterUrl?: boolean
    overview?: boolean
    active?: boolean
  }

  export type movieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    showtime?: boolean | movie$showtimeArgs<ExtArgs>
    _count?: boolean | MovieCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type movieIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $moviePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "movie"
    objects: {
      showtime: Prisma.$showtimePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      title: string
      durationMin: number
      rating: string | null
      createdAt: Date
      posterUrl: string | null
      overview: string | null
      active: boolean
    }, ExtArgs["result"]["movie"]>
    composites: {}
  }

  type movieGetPayload<S extends boolean | null | undefined | movieDefaultArgs> = $Result.GetResult<Prisma.$moviePayload, S>

  type movieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<movieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovieCountAggregateInputType | true
    }

  export interface movieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['movie'], meta: { name: 'movie' } }
    /**
     * Find zero or one Movie that matches the filter.
     * @param {movieFindUniqueArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends movieFindUniqueArgs>(args: SelectSubset<T, movieFindUniqueArgs<ExtArgs>>): Prisma__movieClient<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Movie that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {movieFindUniqueOrThrowArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends movieFindUniqueOrThrowArgs>(args: SelectSubset<T, movieFindUniqueOrThrowArgs<ExtArgs>>): Prisma__movieClient<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Movie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieFindFirstArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends movieFindFirstArgs>(args?: SelectSubset<T, movieFindFirstArgs<ExtArgs>>): Prisma__movieClient<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Movie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieFindFirstOrThrowArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends movieFindFirstOrThrowArgs>(args?: SelectSubset<T, movieFindFirstOrThrowArgs<ExtArgs>>): Prisma__movieClient<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movies
     * const movies = await prisma.movie.findMany()
     * 
     * // Get first 10 Movies
     * const movies = await prisma.movie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const movieWithIdOnly = await prisma.movie.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends movieFindManyArgs>(args?: SelectSubset<T, movieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Movie.
     * @param {movieCreateArgs} args - Arguments to create a Movie.
     * @example
     * // Create one Movie
     * const Movie = await prisma.movie.create({
     *   data: {
     *     // ... data to create a Movie
     *   }
     * })
     * 
     */
    create<T extends movieCreateArgs>(args: SelectSubset<T, movieCreateArgs<ExtArgs>>): Prisma__movieClient<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Movies.
     * @param {movieCreateManyArgs} args - Arguments to create many Movies.
     * @example
     * // Create many Movies
     * const movie = await prisma.movie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends movieCreateManyArgs>(args?: SelectSubset<T, movieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Movies and returns the data saved in the database.
     * @param {movieCreateManyAndReturnArgs} args - Arguments to create many Movies.
     * @example
     * // Create many Movies
     * const movie = await prisma.movie.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Movies and only return the `id`
     * const movieWithIdOnly = await prisma.movie.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends movieCreateManyAndReturnArgs>(args?: SelectSubset<T, movieCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Movie.
     * @param {movieDeleteArgs} args - Arguments to delete one Movie.
     * @example
     * // Delete one Movie
     * const Movie = await prisma.movie.delete({
     *   where: {
     *     // ... filter to delete one Movie
     *   }
     * })
     * 
     */
    delete<T extends movieDeleteArgs>(args: SelectSubset<T, movieDeleteArgs<ExtArgs>>): Prisma__movieClient<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Movie.
     * @param {movieUpdateArgs} args - Arguments to update one Movie.
     * @example
     * // Update one Movie
     * const movie = await prisma.movie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends movieUpdateArgs>(args: SelectSubset<T, movieUpdateArgs<ExtArgs>>): Prisma__movieClient<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Movies.
     * @param {movieDeleteManyArgs} args - Arguments to filter Movies to delete.
     * @example
     * // Delete a few Movies
     * const { count } = await prisma.movie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends movieDeleteManyArgs>(args?: SelectSubset<T, movieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movies
     * const movie = await prisma.movie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends movieUpdateManyArgs>(args: SelectSubset<T, movieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Movie.
     * @param {movieUpsertArgs} args - Arguments to update or create a Movie.
     * @example
     * // Update or create a Movie
     * const movie = await prisma.movie.upsert({
     *   create: {
     *     // ... data to create a Movie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movie we want to update
     *   }
     * })
     */
    upsert<T extends movieUpsertArgs>(args: SelectSubset<T, movieUpsertArgs<ExtArgs>>): Prisma__movieClient<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieCountArgs} args - Arguments to filter Movies to count.
     * @example
     * // Count the number of Movies
     * const count = await prisma.movie.count({
     *   where: {
     *     // ... the filter for the Movies we want to count
     *   }
     * })
    **/
    count<T extends movieCountArgs>(
      args?: Subset<T, movieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovieAggregateArgs>(args: Subset<T, MovieAggregateArgs>): Prisma.PrismaPromise<GetMovieAggregateType<T>>

    /**
     * Group by Movie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends movieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: movieGroupByArgs['orderBy'] }
        : { orderBy?: movieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, movieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the movie model
   */
  readonly fields: movieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for movie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__movieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    showtime<T extends movie$showtimeArgs<ExtArgs> = {}>(args?: Subset<T, movie$showtimeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the movie model
   */ 
  interface movieFieldRefs {
    readonly id: FieldRef<"movie", 'BigInt'>
    readonly title: FieldRef<"movie", 'String'>
    readonly durationMin: FieldRef<"movie", 'Int'>
    readonly rating: FieldRef<"movie", 'String'>
    readonly createdAt: FieldRef<"movie", 'DateTime'>
    readonly posterUrl: FieldRef<"movie", 'String'>
    readonly overview: FieldRef<"movie", 'String'>
    readonly active: FieldRef<"movie", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * movie findUnique
   */
  export type movieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: movieInclude<ExtArgs> | null
    /**
     * Filter, which movie to fetch.
     */
    where: movieWhereUniqueInput
  }

  /**
   * movie findUniqueOrThrow
   */
  export type movieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: movieInclude<ExtArgs> | null
    /**
     * Filter, which movie to fetch.
     */
    where: movieWhereUniqueInput
  }

  /**
   * movie findFirst
   */
  export type movieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: movieInclude<ExtArgs> | null
    /**
     * Filter, which movie to fetch.
     */
    where?: movieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     */
    orderBy?: movieOrderByWithRelationInput | movieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for movies.
     */
    cursor?: movieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of movies.
     */
    distinct?: MovieScalarFieldEnum | MovieScalarFieldEnum[]
  }

  /**
   * movie findFirstOrThrow
   */
  export type movieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: movieInclude<ExtArgs> | null
    /**
     * Filter, which movie to fetch.
     */
    where?: movieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     */
    orderBy?: movieOrderByWithRelationInput | movieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for movies.
     */
    cursor?: movieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of movies.
     */
    distinct?: MovieScalarFieldEnum | MovieScalarFieldEnum[]
  }

  /**
   * movie findMany
   */
  export type movieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: movieInclude<ExtArgs> | null
    /**
     * Filter, which movies to fetch.
     */
    where?: movieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     */
    orderBy?: movieOrderByWithRelationInput | movieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing movies.
     */
    cursor?: movieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     */
    skip?: number
    distinct?: MovieScalarFieldEnum | MovieScalarFieldEnum[]
  }

  /**
   * movie create
   */
  export type movieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: movieInclude<ExtArgs> | null
    /**
     * The data needed to create a movie.
     */
    data: XOR<movieCreateInput, movieUncheckedCreateInput>
  }

  /**
   * movie createMany
   */
  export type movieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many movies.
     */
    data: movieCreateManyInput | movieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * movie createManyAndReturn
   */
  export type movieCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many movies.
     */
    data: movieCreateManyInput | movieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * movie update
   */
  export type movieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: movieInclude<ExtArgs> | null
    /**
     * The data needed to update a movie.
     */
    data: XOR<movieUpdateInput, movieUncheckedUpdateInput>
    /**
     * Choose, which movie to update.
     */
    where: movieWhereUniqueInput
  }

  /**
   * movie updateMany
   */
  export type movieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update movies.
     */
    data: XOR<movieUpdateManyMutationInput, movieUncheckedUpdateManyInput>
    /**
     * Filter which movies to update
     */
    where?: movieWhereInput
  }

  /**
   * movie upsert
   */
  export type movieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: movieInclude<ExtArgs> | null
    /**
     * The filter to search for the movie to update in case it exists.
     */
    where: movieWhereUniqueInput
    /**
     * In case the movie found by the `where` argument doesn't exist, create a new movie with this data.
     */
    create: XOR<movieCreateInput, movieUncheckedCreateInput>
    /**
     * In case the movie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<movieUpdateInput, movieUncheckedUpdateInput>
  }

  /**
   * movie delete
   */
  export type movieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: movieInclude<ExtArgs> | null
    /**
     * Filter which movie to delete.
     */
    where: movieWhereUniqueInput
  }

  /**
   * movie deleteMany
   */
  export type movieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which movies to delete
     */
    where?: movieWhereInput
  }

  /**
   * movie.showtime
   */
  export type movie$showtimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
    where?: showtimeWhereInput
    orderBy?: showtimeOrderByWithRelationInput | showtimeOrderByWithRelationInput[]
    cursor?: showtimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShowtimeScalarFieldEnum | ShowtimeScalarFieldEnum[]
  }

  /**
   * movie without action
   */
  export type movieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: movieInclude<ExtArgs> | null
  }


  /**
   * Model order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    totalAmount: number | null
    discountAmt: number | null
    showtimeId: number | null
    userId: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: bigint | null
    totalAmount: number | null
    discountAmt: number | null
    showtimeId: bigint | null
    userId: bigint | null
  }

  export type OrderMinAggregateOutputType = {
    id: bigint | null
    refCode: string | null
    status: string | null
    totalAmount: number | null
    discountAmt: number | null
    promoCode: string | null
    paidAt: Date | null
    createdAt: Date | null
    showtimeId: bigint | null
    userId: bigint | null
    buyerEmail: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: bigint | null
    refCode: string | null
    status: string | null
    totalAmount: number | null
    discountAmt: number | null
    promoCode: string | null
    paidAt: Date | null
    createdAt: Date | null
    showtimeId: bigint | null
    userId: bigint | null
    buyerEmail: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    refCode: number
    status: number
    totalAmount: number
    discountAmt: number
    promoCode: number
    paidAt: number
    createdAt: number
    showtimeId: number
    userId: number
    buyerEmail: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    totalAmount?: true
    discountAmt?: true
    showtimeId?: true
    userId?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    totalAmount?: true
    discountAmt?: true
    showtimeId?: true
    userId?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    refCode?: true
    status?: true
    totalAmount?: true
    discountAmt?: true
    promoCode?: true
    paidAt?: true
    createdAt?: true
    showtimeId?: true
    userId?: true
    buyerEmail?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    refCode?: true
    status?: true
    totalAmount?: true
    discountAmt?: true
    promoCode?: true
    paidAt?: true
    createdAt?: true
    showtimeId?: true
    userId?: true
    buyerEmail?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    refCode?: true
    status?: true
    totalAmount?: true
    discountAmt?: true
    promoCode?: true
    paidAt?: true
    createdAt?: true
    showtimeId?: true
    userId?: true
    buyerEmail?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order to aggregate.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type orderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderWhereInput
    orderBy?: orderOrderByWithAggregationInput | orderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: orderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: bigint
    refCode: string
    status: string
    totalAmount: number
    discountAmt: number
    promoCode: string | null
    paidAt: Date | null
    createdAt: Date
    showtimeId: bigint
    userId: bigint | null
    buyerEmail: string | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends orderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type orderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    refCode?: boolean
    status?: boolean
    totalAmount?: boolean
    discountAmt?: boolean
    promoCode?: boolean
    paidAt?: boolean
    createdAt?: boolean
    showtimeId?: boolean
    userId?: boolean
    buyerEmail?: boolean
    showtime?: boolean | showtimeDefaultArgs<ExtArgs>
    user?: boolean | order$userArgs<ExtArgs>
    tickets?: boolean | order$ticketsArgs<ExtArgs>
    promotionredemption?: boolean | order$promotionredemptionArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type orderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    refCode?: boolean
    status?: boolean
    totalAmount?: boolean
    discountAmt?: boolean
    promoCode?: boolean
    paidAt?: boolean
    createdAt?: boolean
    showtimeId?: boolean
    userId?: boolean
    buyerEmail?: boolean
    showtime?: boolean | showtimeDefaultArgs<ExtArgs>
    user?: boolean | order$userArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type orderSelectScalar = {
    id?: boolean
    refCode?: boolean
    status?: boolean
    totalAmount?: boolean
    discountAmt?: boolean
    promoCode?: boolean
    paidAt?: boolean
    createdAt?: boolean
    showtimeId?: boolean
    userId?: boolean
    buyerEmail?: boolean
  }

  export type orderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    showtime?: boolean | showtimeDefaultArgs<ExtArgs>
    user?: boolean | order$userArgs<ExtArgs>
    tickets?: boolean | order$ticketsArgs<ExtArgs>
    promotionredemption?: boolean | order$promotionredemptionArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type orderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    showtime?: boolean | showtimeDefaultArgs<ExtArgs>
    user?: boolean | order$userArgs<ExtArgs>
  }

  export type $orderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "order"
    objects: {
      showtime: Prisma.$showtimePayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs> | null
      tickets: Prisma.$ticketPayload<ExtArgs>[]
      promotionredemption: Prisma.$promotionredemptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      refCode: string
      status: string
      totalAmount: number
      discountAmt: number
      promoCode: string | null
      paidAt: Date | null
      createdAt: Date
      showtimeId: bigint
      userId: bigint | null
      buyerEmail: string | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type orderGetPayload<S extends boolean | null | undefined | orderDefaultArgs> = $Result.GetResult<Prisma.$orderPayload, S>

  type orderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<orderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface orderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['order'], meta: { name: 'order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {orderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends orderFindUniqueArgs>(args: SelectSubset<T, orderFindUniqueArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {orderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends orderFindUniqueOrThrowArgs>(args: SelectSubset<T, orderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends orderFindFirstArgs>(args?: SelectSubset<T, orderFindFirstArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends orderFindFirstOrThrowArgs>(args?: SelectSubset<T, orderFindFirstOrThrowArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends orderFindManyArgs>(args?: SelectSubset<T, orderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Order.
     * @param {orderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends orderCreateArgs>(args: SelectSubset<T, orderCreateArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {orderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends orderCreateManyArgs>(args?: SelectSubset<T, orderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {orderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends orderCreateManyAndReturnArgs>(args?: SelectSubset<T, orderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Order.
     * @param {orderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends orderDeleteArgs>(args: SelectSubset<T, orderDeleteArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Order.
     * @param {orderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends orderUpdateArgs>(args: SelectSubset<T, orderUpdateArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {orderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends orderDeleteManyArgs>(args?: SelectSubset<T, orderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends orderUpdateManyArgs>(args: SelectSubset<T, orderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {orderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends orderUpsertArgs>(args: SelectSubset<T, orderUpsertArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends orderCountArgs>(
      args?: Subset<T, orderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends orderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: orderGroupByArgs['orderBy'] }
        : { orderBy?: orderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, orderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the order model
   */
  readonly fields: orderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__orderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    showtime<T extends showtimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, showtimeDefaultArgs<ExtArgs>>): Prisma__showtimeClient<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends order$userArgs<ExtArgs> = {}>(args?: Subset<T, order$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tickets<T extends order$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, order$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findMany"> | Null>
    promotionredemption<T extends order$promotionredemptionArgs<ExtArgs> = {}>(args?: Subset<T, order$promotionredemptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the order model
   */ 
  interface orderFieldRefs {
    readonly id: FieldRef<"order", 'BigInt'>
    readonly refCode: FieldRef<"order", 'String'>
    readonly status: FieldRef<"order", 'String'>
    readonly totalAmount: FieldRef<"order", 'Float'>
    readonly discountAmt: FieldRef<"order", 'Float'>
    readonly promoCode: FieldRef<"order", 'String'>
    readonly paidAt: FieldRef<"order", 'DateTime'>
    readonly createdAt: FieldRef<"order", 'DateTime'>
    readonly showtimeId: FieldRef<"order", 'BigInt'>
    readonly userId: FieldRef<"order", 'BigInt'>
    readonly buyerEmail: FieldRef<"order", 'String'>
  }
    

  // Custom InputTypes
  /**
   * order findUnique
   */
  export type orderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order findUniqueOrThrow
   */
  export type orderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order findFirst
   */
  export type orderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * order findFirstOrThrow
   */
  export type orderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * order findMany
   */
  export type orderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * order create
   */
  export type orderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * The data needed to create a order.
     */
    data: XOR<orderCreateInput, orderUncheckedCreateInput>
  }

  /**
   * order createMany
   */
  export type orderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: orderCreateManyInput | orderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * order createManyAndReturn
   */
  export type orderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many orders.
     */
    data: orderCreateManyInput | orderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * order update
   */
  export type orderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * The data needed to update a order.
     */
    data: XOR<orderUpdateInput, orderUncheckedUpdateInput>
    /**
     * Choose, which order to update.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order updateMany
   */
  export type orderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: orderWhereInput
  }

  /**
   * order upsert
   */
  export type orderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * The filter to search for the order to update in case it exists.
     */
    where: orderWhereUniqueInput
    /**
     * In case the order found by the `where` argument doesn't exist, create a new order with this data.
     */
    create: XOR<orderCreateInput, orderUncheckedCreateInput>
    /**
     * In case the order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderUpdateInput, orderUncheckedUpdateInput>
  }

  /**
   * order delete
   */
  export type orderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter which order to delete.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order deleteMany
   */
  export type orderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: orderWhereInput
  }

  /**
   * order.user
   */
  export type order$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * order.tickets
   */
  export type order$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    where?: ticketWhereInput
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    cursor?: ticketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * order.promotionredemption
   */
  export type order$promotionredemptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    where?: promotionredemptionWhereInput
    orderBy?: promotionredemptionOrderByWithRelationInput | promotionredemptionOrderByWithRelationInput[]
    cursor?: promotionredemptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromotionredemptionScalarFieldEnum | PromotionredemptionScalarFieldEnum[]
  }

  /**
   * order without action
   */
  export type orderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
  }


  /**
   * Model passwordresettoken
   */

  export type AggregatePasswordresettoken = {
    _count: PasswordresettokenCountAggregateOutputType | null
    _avg: PasswordresettokenAvgAggregateOutputType | null
    _sum: PasswordresettokenSumAggregateOutputType | null
    _min: PasswordresettokenMinAggregateOutputType | null
    _max: PasswordresettokenMaxAggregateOutputType | null
  }

  export type PasswordresettokenAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PasswordresettokenSumAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
  }

  export type PasswordresettokenMinAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    token: string | null
    expiresAt: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type PasswordresettokenMaxAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    token: string | null
    expiresAt: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type PasswordresettokenCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    used: number
    createdAt: number
    _all: number
  }


  export type PasswordresettokenAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PasswordresettokenSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PasswordresettokenMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
  }

  export type PasswordresettokenMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
  }

  export type PasswordresettokenCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
    _all?: true
  }

  export type PasswordresettokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which passwordresettoken to aggregate.
     */
    where?: passwordresettokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passwordresettokens to fetch.
     */
    orderBy?: passwordresettokenOrderByWithRelationInput | passwordresettokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: passwordresettokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passwordresettokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passwordresettokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned passwordresettokens
    **/
    _count?: true | PasswordresettokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PasswordresettokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PasswordresettokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordresettokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordresettokenMaxAggregateInputType
  }

  export type GetPasswordresettokenAggregateType<T extends PasswordresettokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordresettoken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordresettoken[P]>
      : GetScalarType<T[P], AggregatePasswordresettoken[P]>
  }




  export type passwordresettokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: passwordresettokenWhereInput
    orderBy?: passwordresettokenOrderByWithAggregationInput | passwordresettokenOrderByWithAggregationInput[]
    by: PasswordresettokenScalarFieldEnum[] | PasswordresettokenScalarFieldEnum
    having?: passwordresettokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordresettokenCountAggregateInputType | true
    _avg?: PasswordresettokenAvgAggregateInputType
    _sum?: PasswordresettokenSumAggregateInputType
    _min?: PasswordresettokenMinAggregateInputType
    _max?: PasswordresettokenMaxAggregateInputType
  }

  export type PasswordresettokenGroupByOutputType = {
    id: bigint
    userId: bigint
    token: string
    expiresAt: Date
    used: boolean
    createdAt: Date
    _count: PasswordresettokenCountAggregateOutputType | null
    _avg: PasswordresettokenAvgAggregateOutputType | null
    _sum: PasswordresettokenSumAggregateOutputType | null
    _min: PasswordresettokenMinAggregateOutputType | null
    _max: PasswordresettokenMaxAggregateOutputType | null
  }

  type GetPasswordresettokenGroupByPayload<T extends passwordresettokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordresettokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordresettokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordresettokenGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordresettokenGroupByOutputType[P]>
        }
      >
    >


  export type passwordresettokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordresettoken"]>

  export type passwordresettokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordresettoken"]>

  export type passwordresettokenSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
  }

  export type passwordresettokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type passwordresettokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $passwordresettokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "passwordresettoken"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      userId: bigint
      token: string
      expiresAt: Date
      used: boolean
      createdAt: Date
    }, ExtArgs["result"]["passwordresettoken"]>
    composites: {}
  }

  type passwordresettokenGetPayload<S extends boolean | null | undefined | passwordresettokenDefaultArgs> = $Result.GetResult<Prisma.$passwordresettokenPayload, S>

  type passwordresettokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<passwordresettokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PasswordresettokenCountAggregateInputType | true
    }

  export interface passwordresettokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['passwordresettoken'], meta: { name: 'passwordresettoken' } }
    /**
     * Find zero or one Passwordresettoken that matches the filter.
     * @param {passwordresettokenFindUniqueArgs} args - Arguments to find a Passwordresettoken
     * @example
     * // Get one Passwordresettoken
     * const passwordresettoken = await prisma.passwordresettoken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends passwordresettokenFindUniqueArgs>(args: SelectSubset<T, passwordresettokenFindUniqueArgs<ExtArgs>>): Prisma__passwordresettokenClient<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Passwordresettoken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {passwordresettokenFindUniqueOrThrowArgs} args - Arguments to find a Passwordresettoken
     * @example
     * // Get one Passwordresettoken
     * const passwordresettoken = await prisma.passwordresettoken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends passwordresettokenFindUniqueOrThrowArgs>(args: SelectSubset<T, passwordresettokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__passwordresettokenClient<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Passwordresettoken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordresettokenFindFirstArgs} args - Arguments to find a Passwordresettoken
     * @example
     * // Get one Passwordresettoken
     * const passwordresettoken = await prisma.passwordresettoken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends passwordresettokenFindFirstArgs>(args?: SelectSubset<T, passwordresettokenFindFirstArgs<ExtArgs>>): Prisma__passwordresettokenClient<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Passwordresettoken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordresettokenFindFirstOrThrowArgs} args - Arguments to find a Passwordresettoken
     * @example
     * // Get one Passwordresettoken
     * const passwordresettoken = await prisma.passwordresettoken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends passwordresettokenFindFirstOrThrowArgs>(args?: SelectSubset<T, passwordresettokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__passwordresettokenClient<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Passwordresettokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordresettokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Passwordresettokens
     * const passwordresettokens = await prisma.passwordresettoken.findMany()
     * 
     * // Get first 10 Passwordresettokens
     * const passwordresettokens = await prisma.passwordresettoken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordresettokenWithIdOnly = await prisma.passwordresettoken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends passwordresettokenFindManyArgs>(args?: SelectSubset<T, passwordresettokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Passwordresettoken.
     * @param {passwordresettokenCreateArgs} args - Arguments to create a Passwordresettoken.
     * @example
     * // Create one Passwordresettoken
     * const Passwordresettoken = await prisma.passwordresettoken.create({
     *   data: {
     *     // ... data to create a Passwordresettoken
     *   }
     * })
     * 
     */
    create<T extends passwordresettokenCreateArgs>(args: SelectSubset<T, passwordresettokenCreateArgs<ExtArgs>>): Prisma__passwordresettokenClient<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Passwordresettokens.
     * @param {passwordresettokenCreateManyArgs} args - Arguments to create many Passwordresettokens.
     * @example
     * // Create many Passwordresettokens
     * const passwordresettoken = await prisma.passwordresettoken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends passwordresettokenCreateManyArgs>(args?: SelectSubset<T, passwordresettokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Passwordresettokens and returns the data saved in the database.
     * @param {passwordresettokenCreateManyAndReturnArgs} args - Arguments to create many Passwordresettokens.
     * @example
     * // Create many Passwordresettokens
     * const passwordresettoken = await prisma.passwordresettoken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Passwordresettokens and only return the `id`
     * const passwordresettokenWithIdOnly = await prisma.passwordresettoken.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends passwordresettokenCreateManyAndReturnArgs>(args?: SelectSubset<T, passwordresettokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Passwordresettoken.
     * @param {passwordresettokenDeleteArgs} args - Arguments to delete one Passwordresettoken.
     * @example
     * // Delete one Passwordresettoken
     * const Passwordresettoken = await prisma.passwordresettoken.delete({
     *   where: {
     *     // ... filter to delete one Passwordresettoken
     *   }
     * })
     * 
     */
    delete<T extends passwordresettokenDeleteArgs>(args: SelectSubset<T, passwordresettokenDeleteArgs<ExtArgs>>): Prisma__passwordresettokenClient<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Passwordresettoken.
     * @param {passwordresettokenUpdateArgs} args - Arguments to update one Passwordresettoken.
     * @example
     * // Update one Passwordresettoken
     * const passwordresettoken = await prisma.passwordresettoken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends passwordresettokenUpdateArgs>(args: SelectSubset<T, passwordresettokenUpdateArgs<ExtArgs>>): Prisma__passwordresettokenClient<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Passwordresettokens.
     * @param {passwordresettokenDeleteManyArgs} args - Arguments to filter Passwordresettokens to delete.
     * @example
     * // Delete a few Passwordresettokens
     * const { count } = await prisma.passwordresettoken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends passwordresettokenDeleteManyArgs>(args?: SelectSubset<T, passwordresettokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passwordresettokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordresettokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Passwordresettokens
     * const passwordresettoken = await prisma.passwordresettoken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends passwordresettokenUpdateManyArgs>(args: SelectSubset<T, passwordresettokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Passwordresettoken.
     * @param {passwordresettokenUpsertArgs} args - Arguments to update or create a Passwordresettoken.
     * @example
     * // Update or create a Passwordresettoken
     * const passwordresettoken = await prisma.passwordresettoken.upsert({
     *   create: {
     *     // ... data to create a Passwordresettoken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Passwordresettoken we want to update
     *   }
     * })
     */
    upsert<T extends passwordresettokenUpsertArgs>(args: SelectSubset<T, passwordresettokenUpsertArgs<ExtArgs>>): Prisma__passwordresettokenClient<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Passwordresettokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordresettokenCountArgs} args - Arguments to filter Passwordresettokens to count.
     * @example
     * // Count the number of Passwordresettokens
     * const count = await prisma.passwordresettoken.count({
     *   where: {
     *     // ... the filter for the Passwordresettokens we want to count
     *   }
     * })
    **/
    count<T extends passwordresettokenCountArgs>(
      args?: Subset<T, passwordresettokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordresettokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Passwordresettoken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordresettokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordresettokenAggregateArgs>(args: Subset<T, PasswordresettokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordresettokenAggregateType<T>>

    /**
     * Group by Passwordresettoken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordresettokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends passwordresettokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: passwordresettokenGroupByArgs['orderBy'] }
        : { orderBy?: passwordresettokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, passwordresettokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordresettokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the passwordresettoken model
   */
  readonly fields: passwordresettokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for passwordresettoken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__passwordresettokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the passwordresettoken model
   */ 
  interface passwordresettokenFieldRefs {
    readonly id: FieldRef<"passwordresettoken", 'BigInt'>
    readonly userId: FieldRef<"passwordresettoken", 'BigInt'>
    readonly token: FieldRef<"passwordresettoken", 'String'>
    readonly expiresAt: FieldRef<"passwordresettoken", 'DateTime'>
    readonly used: FieldRef<"passwordresettoken", 'Boolean'>
    readonly createdAt: FieldRef<"passwordresettoken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * passwordresettoken findUnique
   */
  export type passwordresettokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
    /**
     * Filter, which passwordresettoken to fetch.
     */
    where: passwordresettokenWhereUniqueInput
  }

  /**
   * passwordresettoken findUniqueOrThrow
   */
  export type passwordresettokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
    /**
     * Filter, which passwordresettoken to fetch.
     */
    where: passwordresettokenWhereUniqueInput
  }

  /**
   * passwordresettoken findFirst
   */
  export type passwordresettokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
    /**
     * Filter, which passwordresettoken to fetch.
     */
    where?: passwordresettokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passwordresettokens to fetch.
     */
    orderBy?: passwordresettokenOrderByWithRelationInput | passwordresettokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for passwordresettokens.
     */
    cursor?: passwordresettokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passwordresettokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passwordresettokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of passwordresettokens.
     */
    distinct?: PasswordresettokenScalarFieldEnum | PasswordresettokenScalarFieldEnum[]
  }

  /**
   * passwordresettoken findFirstOrThrow
   */
  export type passwordresettokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
    /**
     * Filter, which passwordresettoken to fetch.
     */
    where?: passwordresettokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passwordresettokens to fetch.
     */
    orderBy?: passwordresettokenOrderByWithRelationInput | passwordresettokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for passwordresettokens.
     */
    cursor?: passwordresettokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passwordresettokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passwordresettokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of passwordresettokens.
     */
    distinct?: PasswordresettokenScalarFieldEnum | PasswordresettokenScalarFieldEnum[]
  }

  /**
   * passwordresettoken findMany
   */
  export type passwordresettokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
    /**
     * Filter, which passwordresettokens to fetch.
     */
    where?: passwordresettokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passwordresettokens to fetch.
     */
    orderBy?: passwordresettokenOrderByWithRelationInput | passwordresettokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing passwordresettokens.
     */
    cursor?: passwordresettokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passwordresettokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passwordresettokens.
     */
    skip?: number
    distinct?: PasswordresettokenScalarFieldEnum | PasswordresettokenScalarFieldEnum[]
  }

  /**
   * passwordresettoken create
   */
  export type passwordresettokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
    /**
     * The data needed to create a passwordresettoken.
     */
    data: XOR<passwordresettokenCreateInput, passwordresettokenUncheckedCreateInput>
  }

  /**
   * passwordresettoken createMany
   */
  export type passwordresettokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many passwordresettokens.
     */
    data: passwordresettokenCreateManyInput | passwordresettokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * passwordresettoken createManyAndReturn
   */
  export type passwordresettokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many passwordresettokens.
     */
    data: passwordresettokenCreateManyInput | passwordresettokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * passwordresettoken update
   */
  export type passwordresettokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
    /**
     * The data needed to update a passwordresettoken.
     */
    data: XOR<passwordresettokenUpdateInput, passwordresettokenUncheckedUpdateInput>
    /**
     * Choose, which passwordresettoken to update.
     */
    where: passwordresettokenWhereUniqueInput
  }

  /**
   * passwordresettoken updateMany
   */
  export type passwordresettokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update passwordresettokens.
     */
    data: XOR<passwordresettokenUpdateManyMutationInput, passwordresettokenUncheckedUpdateManyInput>
    /**
     * Filter which passwordresettokens to update
     */
    where?: passwordresettokenWhereInput
  }

  /**
   * passwordresettoken upsert
   */
  export type passwordresettokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
    /**
     * The filter to search for the passwordresettoken to update in case it exists.
     */
    where: passwordresettokenWhereUniqueInput
    /**
     * In case the passwordresettoken found by the `where` argument doesn't exist, create a new passwordresettoken with this data.
     */
    create: XOR<passwordresettokenCreateInput, passwordresettokenUncheckedCreateInput>
    /**
     * In case the passwordresettoken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<passwordresettokenUpdateInput, passwordresettokenUncheckedUpdateInput>
  }

  /**
   * passwordresettoken delete
   */
  export type passwordresettokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
    /**
     * Filter which passwordresettoken to delete.
     */
    where: passwordresettokenWhereUniqueInput
  }

  /**
   * passwordresettoken deleteMany
   */
  export type passwordresettokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which passwordresettokens to delete
     */
    where?: passwordresettokenWhereInput
  }

  /**
   * passwordresettoken without action
   */
  export type passwordresettokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
  }


  /**
   * Model seatlock
   */

  export type AggregateSeatlock = {
    _count: SeatlockCountAggregateOutputType | null
    _avg: SeatlockAvgAggregateOutputType | null
    _sum: SeatlockSumAggregateOutputType | null
    _min: SeatlockMinAggregateOutputType | null
    _max: SeatlockMaxAggregateOutputType | null
  }

  export type SeatlockAvgAggregateOutputType = {
    showtimeId: number | null
  }

  export type SeatlockSumAggregateOutputType = {
    showtimeId: bigint | null
  }

  export type SeatlockMinAggregateOutputType = {
    showtimeId: bigint | null
    seatLabel: string | null
    lockedUntil: Date | null
    refCode: string | null
  }

  export type SeatlockMaxAggregateOutputType = {
    showtimeId: bigint | null
    seatLabel: string | null
    lockedUntil: Date | null
    refCode: string | null
  }

  export type SeatlockCountAggregateOutputType = {
    showtimeId: number
    seatLabel: number
    lockedUntil: number
    refCode: number
    _all: number
  }


  export type SeatlockAvgAggregateInputType = {
    showtimeId?: true
  }

  export type SeatlockSumAggregateInputType = {
    showtimeId?: true
  }

  export type SeatlockMinAggregateInputType = {
    showtimeId?: true
    seatLabel?: true
    lockedUntil?: true
    refCode?: true
  }

  export type SeatlockMaxAggregateInputType = {
    showtimeId?: true
    seatLabel?: true
    lockedUntil?: true
    refCode?: true
  }

  export type SeatlockCountAggregateInputType = {
    showtimeId?: true
    seatLabel?: true
    lockedUntil?: true
    refCode?: true
    _all?: true
  }

  export type SeatlockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which seatlock to aggregate.
     */
    where?: seatlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seatlocks to fetch.
     */
    orderBy?: seatlockOrderByWithRelationInput | seatlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: seatlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seatlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seatlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned seatlocks
    **/
    _count?: true | SeatlockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeatlockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeatlockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeatlockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeatlockMaxAggregateInputType
  }

  export type GetSeatlockAggregateType<T extends SeatlockAggregateArgs> = {
        [P in keyof T & keyof AggregateSeatlock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeatlock[P]>
      : GetScalarType<T[P], AggregateSeatlock[P]>
  }




  export type seatlockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: seatlockWhereInput
    orderBy?: seatlockOrderByWithAggregationInput | seatlockOrderByWithAggregationInput[]
    by: SeatlockScalarFieldEnum[] | SeatlockScalarFieldEnum
    having?: seatlockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeatlockCountAggregateInputType | true
    _avg?: SeatlockAvgAggregateInputType
    _sum?: SeatlockSumAggregateInputType
    _min?: SeatlockMinAggregateInputType
    _max?: SeatlockMaxAggregateInputType
  }

  export type SeatlockGroupByOutputType = {
    showtimeId: bigint
    seatLabel: string
    lockedUntil: Date
    refCode: string
    _count: SeatlockCountAggregateOutputType | null
    _avg: SeatlockAvgAggregateOutputType | null
    _sum: SeatlockSumAggregateOutputType | null
    _min: SeatlockMinAggregateOutputType | null
    _max: SeatlockMaxAggregateOutputType | null
  }

  type GetSeatlockGroupByPayload<T extends seatlockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeatlockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeatlockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeatlockGroupByOutputType[P]>
            : GetScalarType<T[P], SeatlockGroupByOutputType[P]>
        }
      >
    >


  export type seatlockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    showtimeId?: boolean
    seatLabel?: boolean
    lockedUntil?: boolean
    refCode?: boolean
    showtime?: boolean | showtimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seatlock"]>

  export type seatlockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    showtimeId?: boolean
    seatLabel?: boolean
    lockedUntil?: boolean
    refCode?: boolean
    showtime?: boolean | showtimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seatlock"]>

  export type seatlockSelectScalar = {
    showtimeId?: boolean
    seatLabel?: boolean
    lockedUntil?: boolean
    refCode?: boolean
  }

  export type seatlockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    showtime?: boolean | showtimeDefaultArgs<ExtArgs>
  }
  export type seatlockIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    showtime?: boolean | showtimeDefaultArgs<ExtArgs>
  }

  export type $seatlockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "seatlock"
    objects: {
      showtime: Prisma.$showtimePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      showtimeId: bigint
      seatLabel: string
      lockedUntil: Date
      refCode: string
    }, ExtArgs["result"]["seatlock"]>
    composites: {}
  }

  type seatlockGetPayload<S extends boolean | null | undefined | seatlockDefaultArgs> = $Result.GetResult<Prisma.$seatlockPayload, S>

  type seatlockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<seatlockFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeatlockCountAggregateInputType | true
    }

  export interface seatlockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['seatlock'], meta: { name: 'seatlock' } }
    /**
     * Find zero or one Seatlock that matches the filter.
     * @param {seatlockFindUniqueArgs} args - Arguments to find a Seatlock
     * @example
     * // Get one Seatlock
     * const seatlock = await prisma.seatlock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends seatlockFindUniqueArgs>(args: SelectSubset<T, seatlockFindUniqueArgs<ExtArgs>>): Prisma__seatlockClient<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Seatlock that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {seatlockFindUniqueOrThrowArgs} args - Arguments to find a Seatlock
     * @example
     * // Get one Seatlock
     * const seatlock = await prisma.seatlock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends seatlockFindUniqueOrThrowArgs>(args: SelectSubset<T, seatlockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__seatlockClient<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Seatlock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatlockFindFirstArgs} args - Arguments to find a Seatlock
     * @example
     * // Get one Seatlock
     * const seatlock = await prisma.seatlock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends seatlockFindFirstArgs>(args?: SelectSubset<T, seatlockFindFirstArgs<ExtArgs>>): Prisma__seatlockClient<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Seatlock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatlockFindFirstOrThrowArgs} args - Arguments to find a Seatlock
     * @example
     * // Get one Seatlock
     * const seatlock = await prisma.seatlock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends seatlockFindFirstOrThrowArgs>(args?: SelectSubset<T, seatlockFindFirstOrThrowArgs<ExtArgs>>): Prisma__seatlockClient<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Seatlocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatlockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seatlocks
     * const seatlocks = await prisma.seatlock.findMany()
     * 
     * // Get first 10 Seatlocks
     * const seatlocks = await prisma.seatlock.findMany({ take: 10 })
     * 
     * // Only select the `showtimeId`
     * const seatlockWithShowtimeIdOnly = await prisma.seatlock.findMany({ select: { showtimeId: true } })
     * 
     */
    findMany<T extends seatlockFindManyArgs>(args?: SelectSubset<T, seatlockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Seatlock.
     * @param {seatlockCreateArgs} args - Arguments to create a Seatlock.
     * @example
     * // Create one Seatlock
     * const Seatlock = await prisma.seatlock.create({
     *   data: {
     *     // ... data to create a Seatlock
     *   }
     * })
     * 
     */
    create<T extends seatlockCreateArgs>(args: SelectSubset<T, seatlockCreateArgs<ExtArgs>>): Prisma__seatlockClient<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Seatlocks.
     * @param {seatlockCreateManyArgs} args - Arguments to create many Seatlocks.
     * @example
     * // Create many Seatlocks
     * const seatlock = await prisma.seatlock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends seatlockCreateManyArgs>(args?: SelectSubset<T, seatlockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Seatlocks and returns the data saved in the database.
     * @param {seatlockCreateManyAndReturnArgs} args - Arguments to create many Seatlocks.
     * @example
     * // Create many Seatlocks
     * const seatlock = await prisma.seatlock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Seatlocks and only return the `showtimeId`
     * const seatlockWithShowtimeIdOnly = await prisma.seatlock.createManyAndReturn({ 
     *   select: { showtimeId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends seatlockCreateManyAndReturnArgs>(args?: SelectSubset<T, seatlockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Seatlock.
     * @param {seatlockDeleteArgs} args - Arguments to delete one Seatlock.
     * @example
     * // Delete one Seatlock
     * const Seatlock = await prisma.seatlock.delete({
     *   where: {
     *     // ... filter to delete one Seatlock
     *   }
     * })
     * 
     */
    delete<T extends seatlockDeleteArgs>(args: SelectSubset<T, seatlockDeleteArgs<ExtArgs>>): Prisma__seatlockClient<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Seatlock.
     * @param {seatlockUpdateArgs} args - Arguments to update one Seatlock.
     * @example
     * // Update one Seatlock
     * const seatlock = await prisma.seatlock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends seatlockUpdateArgs>(args: SelectSubset<T, seatlockUpdateArgs<ExtArgs>>): Prisma__seatlockClient<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Seatlocks.
     * @param {seatlockDeleteManyArgs} args - Arguments to filter Seatlocks to delete.
     * @example
     * // Delete a few Seatlocks
     * const { count } = await prisma.seatlock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends seatlockDeleteManyArgs>(args?: SelectSubset<T, seatlockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seatlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatlockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seatlocks
     * const seatlock = await prisma.seatlock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends seatlockUpdateManyArgs>(args: SelectSubset<T, seatlockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seatlock.
     * @param {seatlockUpsertArgs} args - Arguments to update or create a Seatlock.
     * @example
     * // Update or create a Seatlock
     * const seatlock = await prisma.seatlock.upsert({
     *   create: {
     *     // ... data to create a Seatlock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seatlock we want to update
     *   }
     * })
     */
    upsert<T extends seatlockUpsertArgs>(args: SelectSubset<T, seatlockUpsertArgs<ExtArgs>>): Prisma__seatlockClient<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Seatlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatlockCountArgs} args - Arguments to filter Seatlocks to count.
     * @example
     * // Count the number of Seatlocks
     * const count = await prisma.seatlock.count({
     *   where: {
     *     // ... the filter for the Seatlocks we want to count
     *   }
     * })
    **/
    count<T extends seatlockCountArgs>(
      args?: Subset<T, seatlockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeatlockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seatlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatlockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeatlockAggregateArgs>(args: Subset<T, SeatlockAggregateArgs>): Prisma.PrismaPromise<GetSeatlockAggregateType<T>>

    /**
     * Group by Seatlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatlockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends seatlockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: seatlockGroupByArgs['orderBy'] }
        : { orderBy?: seatlockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, seatlockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeatlockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the seatlock model
   */
  readonly fields: seatlockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for seatlock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__seatlockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    showtime<T extends showtimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, showtimeDefaultArgs<ExtArgs>>): Prisma__showtimeClient<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the seatlock model
   */ 
  interface seatlockFieldRefs {
    readonly showtimeId: FieldRef<"seatlock", 'BigInt'>
    readonly seatLabel: FieldRef<"seatlock", 'String'>
    readonly lockedUntil: FieldRef<"seatlock", 'DateTime'>
    readonly refCode: FieldRef<"seatlock", 'String'>
  }
    

  // Custom InputTypes
  /**
   * seatlock findUnique
   */
  export type seatlockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
    /**
     * Filter, which seatlock to fetch.
     */
    where: seatlockWhereUniqueInput
  }

  /**
   * seatlock findUniqueOrThrow
   */
  export type seatlockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
    /**
     * Filter, which seatlock to fetch.
     */
    where: seatlockWhereUniqueInput
  }

  /**
   * seatlock findFirst
   */
  export type seatlockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
    /**
     * Filter, which seatlock to fetch.
     */
    where?: seatlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seatlocks to fetch.
     */
    orderBy?: seatlockOrderByWithRelationInput | seatlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for seatlocks.
     */
    cursor?: seatlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seatlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seatlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of seatlocks.
     */
    distinct?: SeatlockScalarFieldEnum | SeatlockScalarFieldEnum[]
  }

  /**
   * seatlock findFirstOrThrow
   */
  export type seatlockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
    /**
     * Filter, which seatlock to fetch.
     */
    where?: seatlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seatlocks to fetch.
     */
    orderBy?: seatlockOrderByWithRelationInput | seatlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for seatlocks.
     */
    cursor?: seatlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seatlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seatlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of seatlocks.
     */
    distinct?: SeatlockScalarFieldEnum | SeatlockScalarFieldEnum[]
  }

  /**
   * seatlock findMany
   */
  export type seatlockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
    /**
     * Filter, which seatlocks to fetch.
     */
    where?: seatlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seatlocks to fetch.
     */
    orderBy?: seatlockOrderByWithRelationInput | seatlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing seatlocks.
     */
    cursor?: seatlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seatlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seatlocks.
     */
    skip?: number
    distinct?: SeatlockScalarFieldEnum | SeatlockScalarFieldEnum[]
  }

  /**
   * seatlock create
   */
  export type seatlockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
    /**
     * The data needed to create a seatlock.
     */
    data: XOR<seatlockCreateInput, seatlockUncheckedCreateInput>
  }

  /**
   * seatlock createMany
   */
  export type seatlockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many seatlocks.
     */
    data: seatlockCreateManyInput | seatlockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * seatlock createManyAndReturn
   */
  export type seatlockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many seatlocks.
     */
    data: seatlockCreateManyInput | seatlockCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * seatlock update
   */
  export type seatlockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
    /**
     * The data needed to update a seatlock.
     */
    data: XOR<seatlockUpdateInput, seatlockUncheckedUpdateInput>
    /**
     * Choose, which seatlock to update.
     */
    where: seatlockWhereUniqueInput
  }

  /**
   * seatlock updateMany
   */
  export type seatlockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update seatlocks.
     */
    data: XOR<seatlockUpdateManyMutationInput, seatlockUncheckedUpdateManyInput>
    /**
     * Filter which seatlocks to update
     */
    where?: seatlockWhereInput
  }

  /**
   * seatlock upsert
   */
  export type seatlockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
    /**
     * The filter to search for the seatlock to update in case it exists.
     */
    where: seatlockWhereUniqueInput
    /**
     * In case the seatlock found by the `where` argument doesn't exist, create a new seatlock with this data.
     */
    create: XOR<seatlockCreateInput, seatlockUncheckedCreateInput>
    /**
     * In case the seatlock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<seatlockUpdateInput, seatlockUncheckedUpdateInput>
  }

  /**
   * seatlock delete
   */
  export type seatlockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
    /**
     * Filter which seatlock to delete.
     */
    where: seatlockWhereUniqueInput
  }

  /**
   * seatlock deleteMany
   */
  export type seatlockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which seatlocks to delete
     */
    where?: seatlockWhereInput
  }

  /**
   * seatlock without action
   */
  export type seatlockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
  }


  /**
   * Model showtime
   */

  export type AggregateShowtime = {
    _count: ShowtimeCountAggregateOutputType | null
    _avg: ShowtimeAvgAggregateOutputType | null
    _sum: ShowtimeSumAggregateOutputType | null
    _min: ShowtimeMinAggregateOutputType | null
    _max: ShowtimeMaxAggregateOutputType | null
  }

  export type ShowtimeAvgAggregateOutputType = {
    id: number | null
    movieId: number | null
    basePrice: Decimal | null
  }

  export type ShowtimeSumAggregateOutputType = {
    id: bigint | null
    movieId: bigint | null
    basePrice: Decimal | null
  }

  export type ShowtimeMinAggregateOutputType = {
    id: bigint | null
    movieId: bigint | null
    theater: string | null
    startsAt: Date | null
    basePrice: Decimal | null
  }

  export type ShowtimeMaxAggregateOutputType = {
    id: bigint | null
    movieId: bigint | null
    theater: string | null
    startsAt: Date | null
    basePrice: Decimal | null
  }

  export type ShowtimeCountAggregateOutputType = {
    id: number
    movieId: number
    theater: number
    startsAt: number
    basePrice: number
    _all: number
  }


  export type ShowtimeAvgAggregateInputType = {
    id?: true
    movieId?: true
    basePrice?: true
  }

  export type ShowtimeSumAggregateInputType = {
    id?: true
    movieId?: true
    basePrice?: true
  }

  export type ShowtimeMinAggregateInputType = {
    id?: true
    movieId?: true
    theater?: true
    startsAt?: true
    basePrice?: true
  }

  export type ShowtimeMaxAggregateInputType = {
    id?: true
    movieId?: true
    theater?: true
    startsAt?: true
    basePrice?: true
  }

  export type ShowtimeCountAggregateInputType = {
    id?: true
    movieId?: true
    theater?: true
    startsAt?: true
    basePrice?: true
    _all?: true
  }

  export type ShowtimeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which showtime to aggregate.
     */
    where?: showtimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showtimes to fetch.
     */
    orderBy?: showtimeOrderByWithRelationInput | showtimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: showtimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showtimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showtimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned showtimes
    **/
    _count?: true | ShowtimeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShowtimeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShowtimeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShowtimeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShowtimeMaxAggregateInputType
  }

  export type GetShowtimeAggregateType<T extends ShowtimeAggregateArgs> = {
        [P in keyof T & keyof AggregateShowtime]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShowtime[P]>
      : GetScalarType<T[P], AggregateShowtime[P]>
  }




  export type showtimeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: showtimeWhereInput
    orderBy?: showtimeOrderByWithAggregationInput | showtimeOrderByWithAggregationInput[]
    by: ShowtimeScalarFieldEnum[] | ShowtimeScalarFieldEnum
    having?: showtimeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShowtimeCountAggregateInputType | true
    _avg?: ShowtimeAvgAggregateInputType
    _sum?: ShowtimeSumAggregateInputType
    _min?: ShowtimeMinAggregateInputType
    _max?: ShowtimeMaxAggregateInputType
  }

  export type ShowtimeGroupByOutputType = {
    id: bigint
    movieId: bigint
    theater: string
    startsAt: Date
    basePrice: Decimal
    _count: ShowtimeCountAggregateOutputType | null
    _avg: ShowtimeAvgAggregateOutputType | null
    _sum: ShowtimeSumAggregateOutputType | null
    _min: ShowtimeMinAggregateOutputType | null
    _max: ShowtimeMaxAggregateOutputType | null
  }

  type GetShowtimeGroupByPayload<T extends showtimeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShowtimeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShowtimeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShowtimeGroupByOutputType[P]>
            : GetScalarType<T[P], ShowtimeGroupByOutputType[P]>
        }
      >
    >


  export type showtimeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    movieId?: boolean
    theater?: boolean
    startsAt?: boolean
    basePrice?: boolean
    order?: boolean | showtime$orderArgs<ExtArgs>
    seatlock?: boolean | showtime$seatlockArgs<ExtArgs>
    movie?: boolean | movieDefaultArgs<ExtArgs>
    _count?: boolean | ShowtimeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["showtime"]>

  export type showtimeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    movieId?: boolean
    theater?: boolean
    startsAt?: boolean
    basePrice?: boolean
    movie?: boolean | movieDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["showtime"]>

  export type showtimeSelectScalar = {
    id?: boolean
    movieId?: boolean
    theater?: boolean
    startsAt?: boolean
    basePrice?: boolean
  }

  export type showtimeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | showtime$orderArgs<ExtArgs>
    seatlock?: boolean | showtime$seatlockArgs<ExtArgs>
    movie?: boolean | movieDefaultArgs<ExtArgs>
    _count?: boolean | ShowtimeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type showtimeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movie?: boolean | movieDefaultArgs<ExtArgs>
  }

  export type $showtimePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "showtime"
    objects: {
      order: Prisma.$orderPayload<ExtArgs>[]
      seatlock: Prisma.$seatlockPayload<ExtArgs>[]
      movie: Prisma.$moviePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      movieId: bigint
      theater: string
      startsAt: Date
      basePrice: Prisma.Decimal
    }, ExtArgs["result"]["showtime"]>
    composites: {}
  }

  type showtimeGetPayload<S extends boolean | null | undefined | showtimeDefaultArgs> = $Result.GetResult<Prisma.$showtimePayload, S>

  type showtimeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<showtimeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShowtimeCountAggregateInputType | true
    }

  export interface showtimeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['showtime'], meta: { name: 'showtime' } }
    /**
     * Find zero or one Showtime that matches the filter.
     * @param {showtimeFindUniqueArgs} args - Arguments to find a Showtime
     * @example
     * // Get one Showtime
     * const showtime = await prisma.showtime.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends showtimeFindUniqueArgs>(args: SelectSubset<T, showtimeFindUniqueArgs<ExtArgs>>): Prisma__showtimeClient<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Showtime that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {showtimeFindUniqueOrThrowArgs} args - Arguments to find a Showtime
     * @example
     * // Get one Showtime
     * const showtime = await prisma.showtime.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends showtimeFindUniqueOrThrowArgs>(args: SelectSubset<T, showtimeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__showtimeClient<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Showtime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showtimeFindFirstArgs} args - Arguments to find a Showtime
     * @example
     * // Get one Showtime
     * const showtime = await prisma.showtime.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends showtimeFindFirstArgs>(args?: SelectSubset<T, showtimeFindFirstArgs<ExtArgs>>): Prisma__showtimeClient<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Showtime that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showtimeFindFirstOrThrowArgs} args - Arguments to find a Showtime
     * @example
     * // Get one Showtime
     * const showtime = await prisma.showtime.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends showtimeFindFirstOrThrowArgs>(args?: SelectSubset<T, showtimeFindFirstOrThrowArgs<ExtArgs>>): Prisma__showtimeClient<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Showtimes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showtimeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Showtimes
     * const showtimes = await prisma.showtime.findMany()
     * 
     * // Get first 10 Showtimes
     * const showtimes = await prisma.showtime.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const showtimeWithIdOnly = await prisma.showtime.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends showtimeFindManyArgs>(args?: SelectSubset<T, showtimeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Showtime.
     * @param {showtimeCreateArgs} args - Arguments to create a Showtime.
     * @example
     * // Create one Showtime
     * const Showtime = await prisma.showtime.create({
     *   data: {
     *     // ... data to create a Showtime
     *   }
     * })
     * 
     */
    create<T extends showtimeCreateArgs>(args: SelectSubset<T, showtimeCreateArgs<ExtArgs>>): Prisma__showtimeClient<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Showtimes.
     * @param {showtimeCreateManyArgs} args - Arguments to create many Showtimes.
     * @example
     * // Create many Showtimes
     * const showtime = await prisma.showtime.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends showtimeCreateManyArgs>(args?: SelectSubset<T, showtimeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Showtimes and returns the data saved in the database.
     * @param {showtimeCreateManyAndReturnArgs} args - Arguments to create many Showtimes.
     * @example
     * // Create many Showtimes
     * const showtime = await prisma.showtime.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Showtimes and only return the `id`
     * const showtimeWithIdOnly = await prisma.showtime.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends showtimeCreateManyAndReturnArgs>(args?: SelectSubset<T, showtimeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Showtime.
     * @param {showtimeDeleteArgs} args - Arguments to delete one Showtime.
     * @example
     * // Delete one Showtime
     * const Showtime = await prisma.showtime.delete({
     *   where: {
     *     // ... filter to delete one Showtime
     *   }
     * })
     * 
     */
    delete<T extends showtimeDeleteArgs>(args: SelectSubset<T, showtimeDeleteArgs<ExtArgs>>): Prisma__showtimeClient<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Showtime.
     * @param {showtimeUpdateArgs} args - Arguments to update one Showtime.
     * @example
     * // Update one Showtime
     * const showtime = await prisma.showtime.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends showtimeUpdateArgs>(args: SelectSubset<T, showtimeUpdateArgs<ExtArgs>>): Prisma__showtimeClient<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Showtimes.
     * @param {showtimeDeleteManyArgs} args - Arguments to filter Showtimes to delete.
     * @example
     * // Delete a few Showtimes
     * const { count } = await prisma.showtime.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends showtimeDeleteManyArgs>(args?: SelectSubset<T, showtimeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Showtimes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showtimeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Showtimes
     * const showtime = await prisma.showtime.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends showtimeUpdateManyArgs>(args: SelectSubset<T, showtimeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Showtime.
     * @param {showtimeUpsertArgs} args - Arguments to update or create a Showtime.
     * @example
     * // Update or create a Showtime
     * const showtime = await prisma.showtime.upsert({
     *   create: {
     *     // ... data to create a Showtime
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Showtime we want to update
     *   }
     * })
     */
    upsert<T extends showtimeUpsertArgs>(args: SelectSubset<T, showtimeUpsertArgs<ExtArgs>>): Prisma__showtimeClient<$Result.GetResult<Prisma.$showtimePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Showtimes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showtimeCountArgs} args - Arguments to filter Showtimes to count.
     * @example
     * // Count the number of Showtimes
     * const count = await prisma.showtime.count({
     *   where: {
     *     // ... the filter for the Showtimes we want to count
     *   }
     * })
    **/
    count<T extends showtimeCountArgs>(
      args?: Subset<T, showtimeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShowtimeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Showtime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowtimeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShowtimeAggregateArgs>(args: Subset<T, ShowtimeAggregateArgs>): Prisma.PrismaPromise<GetShowtimeAggregateType<T>>

    /**
     * Group by Showtime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showtimeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends showtimeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: showtimeGroupByArgs['orderBy'] }
        : { orderBy?: showtimeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, showtimeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShowtimeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the showtime model
   */
  readonly fields: showtimeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for showtime.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__showtimeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends showtime$orderArgs<ExtArgs> = {}>(args?: Subset<T, showtime$orderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findMany"> | Null>
    seatlock<T extends showtime$seatlockArgs<ExtArgs> = {}>(args?: Subset<T, showtime$seatlockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$seatlockPayload<ExtArgs>, T, "findMany"> | Null>
    movie<T extends movieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, movieDefaultArgs<ExtArgs>>): Prisma__movieClient<$Result.GetResult<Prisma.$moviePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the showtime model
   */ 
  interface showtimeFieldRefs {
    readonly id: FieldRef<"showtime", 'BigInt'>
    readonly movieId: FieldRef<"showtime", 'BigInt'>
    readonly theater: FieldRef<"showtime", 'String'>
    readonly startsAt: FieldRef<"showtime", 'DateTime'>
    readonly basePrice: FieldRef<"showtime", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * showtime findUnique
   */
  export type showtimeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
    /**
     * Filter, which showtime to fetch.
     */
    where: showtimeWhereUniqueInput
  }

  /**
   * showtime findUniqueOrThrow
   */
  export type showtimeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
    /**
     * Filter, which showtime to fetch.
     */
    where: showtimeWhereUniqueInput
  }

  /**
   * showtime findFirst
   */
  export type showtimeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
    /**
     * Filter, which showtime to fetch.
     */
    where?: showtimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showtimes to fetch.
     */
    orderBy?: showtimeOrderByWithRelationInput | showtimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for showtimes.
     */
    cursor?: showtimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showtimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showtimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of showtimes.
     */
    distinct?: ShowtimeScalarFieldEnum | ShowtimeScalarFieldEnum[]
  }

  /**
   * showtime findFirstOrThrow
   */
  export type showtimeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
    /**
     * Filter, which showtime to fetch.
     */
    where?: showtimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showtimes to fetch.
     */
    orderBy?: showtimeOrderByWithRelationInput | showtimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for showtimes.
     */
    cursor?: showtimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showtimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showtimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of showtimes.
     */
    distinct?: ShowtimeScalarFieldEnum | ShowtimeScalarFieldEnum[]
  }

  /**
   * showtime findMany
   */
  export type showtimeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
    /**
     * Filter, which showtimes to fetch.
     */
    where?: showtimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showtimes to fetch.
     */
    orderBy?: showtimeOrderByWithRelationInput | showtimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing showtimes.
     */
    cursor?: showtimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showtimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showtimes.
     */
    skip?: number
    distinct?: ShowtimeScalarFieldEnum | ShowtimeScalarFieldEnum[]
  }

  /**
   * showtime create
   */
  export type showtimeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
    /**
     * The data needed to create a showtime.
     */
    data: XOR<showtimeCreateInput, showtimeUncheckedCreateInput>
  }

  /**
   * showtime createMany
   */
  export type showtimeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many showtimes.
     */
    data: showtimeCreateManyInput | showtimeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * showtime createManyAndReturn
   */
  export type showtimeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many showtimes.
     */
    data: showtimeCreateManyInput | showtimeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * showtime update
   */
  export type showtimeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
    /**
     * The data needed to update a showtime.
     */
    data: XOR<showtimeUpdateInput, showtimeUncheckedUpdateInput>
    /**
     * Choose, which showtime to update.
     */
    where: showtimeWhereUniqueInput
  }

  /**
   * showtime updateMany
   */
  export type showtimeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update showtimes.
     */
    data: XOR<showtimeUpdateManyMutationInput, showtimeUncheckedUpdateManyInput>
    /**
     * Filter which showtimes to update
     */
    where?: showtimeWhereInput
  }

  /**
   * showtime upsert
   */
  export type showtimeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
    /**
     * The filter to search for the showtime to update in case it exists.
     */
    where: showtimeWhereUniqueInput
    /**
     * In case the showtime found by the `where` argument doesn't exist, create a new showtime with this data.
     */
    create: XOR<showtimeCreateInput, showtimeUncheckedCreateInput>
    /**
     * In case the showtime was found with the provided `where` argument, update it with this data.
     */
    update: XOR<showtimeUpdateInput, showtimeUncheckedUpdateInput>
  }

  /**
   * showtime delete
   */
  export type showtimeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
    /**
     * Filter which showtime to delete.
     */
    where: showtimeWhereUniqueInput
  }

  /**
   * showtime deleteMany
   */
  export type showtimeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which showtimes to delete
     */
    where?: showtimeWhereInput
  }

  /**
   * showtime.order
   */
  export type showtime$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    where?: orderWhereInput
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    cursor?: orderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * showtime.seatlock
   */
  export type showtime$seatlockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seatlock
     */
    select?: seatlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seatlockInclude<ExtArgs> | null
    where?: seatlockWhereInput
    orderBy?: seatlockOrderByWithRelationInput | seatlockOrderByWithRelationInput[]
    cursor?: seatlockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeatlockScalarFieldEnum | SeatlockScalarFieldEnum[]
  }

  /**
   * showtime without action
   */
  export type showtimeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showtime
     */
    select?: showtimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: showtimeInclude<ExtArgs> | null
  }


  /**
   * Model ticket
   */

  export type AggregateTicket = {
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  export type TicketAvgAggregateOutputType = {
    id: number | null
    price: number | null
    orderId: number | null
  }

  export type TicketSumAggregateOutputType = {
    id: bigint | null
    price: number | null
    orderId: bigint | null
  }

  export type TicketMinAggregateOutputType = {
    id: bigint | null
    seatLabel: string | null
    price: number | null
    createdAt: Date | null
    orderId: bigint | null
  }

  export type TicketMaxAggregateOutputType = {
    id: bigint | null
    seatLabel: string | null
    price: number | null
    createdAt: Date | null
    orderId: bigint | null
  }

  export type TicketCountAggregateOutputType = {
    id: number
    seatLabel: number
    price: number
    createdAt: number
    orderId: number
    _all: number
  }


  export type TicketAvgAggregateInputType = {
    id?: true
    price?: true
    orderId?: true
  }

  export type TicketSumAggregateInputType = {
    id?: true
    price?: true
    orderId?: true
  }

  export type TicketMinAggregateInputType = {
    id?: true
    seatLabel?: true
    price?: true
    createdAt?: true
    orderId?: true
  }

  export type TicketMaxAggregateInputType = {
    id?: true
    seatLabel?: true
    price?: true
    createdAt?: true
    orderId?: true
  }

  export type TicketCountAggregateInputType = {
    id?: true
    seatLabel?: true
    price?: true
    createdAt?: true
    orderId?: true
    _all?: true
  }

  export type TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket to aggregate.
     */
    where?: ticketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tickets
    **/
    _count?: true | TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketMaxAggregateInputType
  }

  export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket[P]>
      : GetScalarType<T[P], AggregateTicket[P]>
  }




  export type ticketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketWhereInput
    orderBy?: ticketOrderByWithAggregationInput | ticketOrderByWithAggregationInput[]
    by: TicketScalarFieldEnum[] | TicketScalarFieldEnum
    having?: ticketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketCountAggregateInputType | true
    _avg?: TicketAvgAggregateInputType
    _sum?: TicketSumAggregateInputType
    _min?: TicketMinAggregateInputType
    _max?: TicketMaxAggregateInputType
  }

  export type TicketGroupByOutputType = {
    id: bigint
    seatLabel: string
    price: number
    createdAt: Date
    orderId: bigint
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  type GetTicketGroupByPayload<T extends ticketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketGroupByOutputType[P]>
            : GetScalarType<T[P], TicketGroupByOutputType[P]>
        }
      >
    >


  export type ticketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seatLabel?: boolean
    price?: boolean
    createdAt?: boolean
    orderId?: boolean
    order?: boolean | orderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type ticketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seatLabel?: boolean
    price?: boolean
    createdAt?: boolean
    orderId?: boolean
    order?: boolean | orderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type ticketSelectScalar = {
    id?: boolean
    seatLabel?: boolean
    price?: boolean
    createdAt?: boolean
    orderId?: boolean
  }

  export type ticketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | orderDefaultArgs<ExtArgs>
  }
  export type ticketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | orderDefaultArgs<ExtArgs>
  }

  export type $ticketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ticket"
    objects: {
      order: Prisma.$orderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      seatLabel: string
      price: number
      createdAt: Date
      orderId: bigint
    }, ExtArgs["result"]["ticket"]>
    composites: {}
  }

  type ticketGetPayload<S extends boolean | null | undefined | ticketDefaultArgs> = $Result.GetResult<Prisma.$ticketPayload, S>

  type ticketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ticketFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketCountAggregateInputType | true
    }

  export interface ticketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ticket'], meta: { name: 'ticket' } }
    /**
     * Find zero or one Ticket that matches the filter.
     * @param {ticketFindUniqueArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticketFindUniqueArgs>(args: SelectSubset<T, ticketFindUniqueArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ticket that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ticketFindUniqueOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticketFindUniqueOrThrowArgs>(args: SelectSubset<T, ticketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketFindFirstArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticketFindFirstArgs>(args?: SelectSubset<T, ticketFindFirstArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketFindFirstOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticketFindFirstOrThrowArgs>(args?: SelectSubset<T, ticketFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.ticket.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.ticket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketWithIdOnly = await prisma.ticket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticketFindManyArgs>(args?: SelectSubset<T, ticketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ticket.
     * @param {ticketCreateArgs} args - Arguments to create a Ticket.
     * @example
     * // Create one Ticket
     * const Ticket = await prisma.ticket.create({
     *   data: {
     *     // ... data to create a Ticket
     *   }
     * })
     * 
     */
    create<T extends ticketCreateArgs>(args: SelectSubset<T, ticketCreateArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tickets.
     * @param {ticketCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticketCreateManyArgs>(args?: SelectSubset<T, ticketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tickets and returns the data saved in the database.
     * @param {ticketCreateManyAndReturnArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tickets and only return the `id`
     * const ticketWithIdOnly = await prisma.ticket.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ticketCreateManyAndReturnArgs>(args?: SelectSubset<T, ticketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ticket.
     * @param {ticketDeleteArgs} args - Arguments to delete one Ticket.
     * @example
     * // Delete one Ticket
     * const Ticket = await prisma.ticket.delete({
     *   where: {
     *     // ... filter to delete one Ticket
     *   }
     * })
     * 
     */
    delete<T extends ticketDeleteArgs>(args: SelectSubset<T, ticketDeleteArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ticket.
     * @param {ticketUpdateArgs} args - Arguments to update one Ticket.
     * @example
     * // Update one Ticket
     * const ticket = await prisma.ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticketUpdateArgs>(args: SelectSubset<T, ticketUpdateArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tickets.
     * @param {ticketDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticketDeleteManyArgs>(args?: SelectSubset<T, ticketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticketUpdateManyArgs>(args: SelectSubset<T, ticketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket.
     * @param {ticketUpsertArgs} args - Arguments to update or create a Ticket.
     * @example
     * // Update or create a Ticket
     * const ticket = await prisma.ticket.upsert({
     *   create: {
     *     // ... data to create a Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket we want to update
     *   }
     * })
     */
    upsert<T extends ticketUpsertArgs>(args: SelectSubset<T, ticketUpsertArgs<ExtArgs>>): Prisma__ticketClient<$Result.GetResult<Prisma.$ticketPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.ticket.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends ticketCountArgs>(
      args?: Subset<T, ticketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketAggregateArgs>(args: Subset<T, TicketAggregateArgs>): Prisma.PrismaPromise<GetTicketAggregateType<T>>

    /**
     * Group by Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticketGroupByArgs['orderBy'] }
        : { orderBy?: ticketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ticket model
   */
  readonly fields: ticketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends orderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, orderDefaultArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ticket model
   */ 
  interface ticketFieldRefs {
    readonly id: FieldRef<"ticket", 'BigInt'>
    readonly seatLabel: FieldRef<"ticket", 'String'>
    readonly price: FieldRef<"ticket", 'Float'>
    readonly createdAt: FieldRef<"ticket", 'DateTime'>
    readonly orderId: FieldRef<"ticket", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * ticket findUnique
   */
  export type ticketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter, which ticket to fetch.
     */
    where: ticketWhereUniqueInput
  }

  /**
   * ticket findUniqueOrThrow
   */
  export type ticketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter, which ticket to fetch.
     */
    where: ticketWhereUniqueInput
  }

  /**
   * ticket findFirst
   */
  export type ticketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter, which ticket to fetch.
     */
    where?: ticketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tickets.
     */
    cursor?: ticketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * ticket findFirstOrThrow
   */
  export type ticketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter, which ticket to fetch.
     */
    where?: ticketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tickets.
     */
    cursor?: ticketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * ticket findMany
   */
  export type ticketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketOrderByWithRelationInput | ticketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tickets.
     */
    cursor?: ticketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * ticket create
   */
  export type ticketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * The data needed to create a ticket.
     */
    data: XOR<ticketCreateInput, ticketUncheckedCreateInput>
  }

  /**
   * ticket createMany
   */
  export type ticketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tickets.
     */
    data: ticketCreateManyInput | ticketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ticket createManyAndReturn
   */
  export type ticketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many tickets.
     */
    data: ticketCreateManyInput | ticketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ticket update
   */
  export type ticketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * The data needed to update a ticket.
     */
    data: XOR<ticketUpdateInput, ticketUncheckedUpdateInput>
    /**
     * Choose, which ticket to update.
     */
    where: ticketWhereUniqueInput
  }

  /**
   * ticket updateMany
   */
  export type ticketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tickets.
     */
    data: XOR<ticketUpdateManyMutationInput, ticketUncheckedUpdateManyInput>
    /**
     * Filter which tickets to update
     */
    where?: ticketWhereInput
  }

  /**
   * ticket upsert
   */
  export type ticketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * The filter to search for the ticket to update in case it exists.
     */
    where: ticketWhereUniqueInput
    /**
     * In case the ticket found by the `where` argument doesn't exist, create a new ticket with this data.
     */
    create: XOR<ticketCreateInput, ticketUncheckedCreateInput>
    /**
     * In case the ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticketUpdateInput, ticketUncheckedUpdateInput>
  }

  /**
   * ticket delete
   */
  export type ticketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
    /**
     * Filter which ticket to delete.
     */
    where: ticketWhereUniqueInput
  }

  /**
   * ticket deleteMany
   */
  export type ticketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tickets to delete
     */
    where?: ticketWhereInput
  }

  /**
   * ticket without action
   */
  export type ticketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket
     */
    select?: ticketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: bigint | null
  }

  export type UserMinAggregateOutputType = {
    id: bigint | null
    email: string | null
    passwordHash: string | null
    displayName: string | null
    role: $Enums.Role | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: bigint | null
    email: string | null
    passwordHash: string | null
    displayName: string | null
    role: $Enums.Role | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    displayName: number
    role: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    displayName?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    displayName?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    displayName?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: bigint
    email: string
    passwordHash: string
    displayName: string | null
    role: $Enums.Role
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    displayName?: boolean
    role?: boolean
    createdAt?: boolean
    orders?: boolean | user$ordersArgs<ExtArgs>
    passwordresettoken?: boolean | user$passwordresettokenArgs<ExtArgs>
    promotionredemption?: boolean | user$promotionredemptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    displayName?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    displayName?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | user$ordersArgs<ExtArgs>
    passwordresettoken?: boolean | user$passwordresettokenArgs<ExtArgs>
    promotionredemption?: boolean | user$promotionredemptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      orders: Prisma.$orderPayload<ExtArgs>[]
      passwordresettoken: Prisma.$passwordresettokenPayload<ExtArgs>[]
      promotionredemption: Prisma.$promotionredemptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      email: string
      passwordHash: string
      displayName: string | null
      role: $Enums.Role
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {userCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userCreateManyAndReturnArgs>(args?: SelectSubset<T, userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends user$ordersArgs<ExtArgs> = {}>(args?: Subset<T, user$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findMany"> | Null>
    passwordresettoken<T extends user$passwordresettokenArgs<ExtArgs> = {}>(args?: Subset<T, user$passwordresettokenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$passwordresettokenPayload<ExtArgs>, T, "findMany"> | Null>
    promotionredemption<T extends user$promotionredemptionArgs<ExtArgs> = {}>(args?: Subset<T, user$promotionredemptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'BigInt'>
    readonly email: FieldRef<"user", 'String'>
    readonly passwordHash: FieldRef<"user", 'String'>
    readonly displayName: FieldRef<"user", 'String'>
    readonly role: FieldRef<"user", 'Role'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user createManyAndReturn
   */
  export type userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.orders
   */
  export type user$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    where?: orderWhereInput
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    cursor?: orderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * user.passwordresettoken
   */
  export type user$passwordresettokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordresettoken
     */
    select?: passwordresettokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordresettokenInclude<ExtArgs> | null
    where?: passwordresettokenWhereInput
    orderBy?: passwordresettokenOrderByWithRelationInput | passwordresettokenOrderByWithRelationInput[]
    cursor?: passwordresettokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordresettokenScalarFieldEnum | PasswordresettokenScalarFieldEnum[]
  }

  /**
   * user.promotionredemption
   */
  export type user$promotionredemptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    where?: promotionredemptionWhereInput
    orderBy?: promotionredemptionOrderByWithRelationInput | promotionredemptionOrderByWithRelationInput[]
    cursor?: promotionredemptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromotionredemptionScalarFieldEnum | PromotionredemptionScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model promotion
   */

  export type AggregatePromotion = {
    _count: PromotionCountAggregateOutputType | null
    _avg: PromotionAvgAggregateOutputType | null
    _sum: PromotionSumAggregateOutputType | null
    _min: PromotionMinAggregateOutputType | null
    _max: PromotionMaxAggregateOutputType | null
  }

  export type PromotionAvgAggregateOutputType = {
    id: number | null
    value: number | null
    maxDiscount: number | null
    minSpend: number | null
    usageLimit: number | null
    usagePerUser: number | null
  }

  export type PromotionSumAggregateOutputType = {
    id: bigint | null
    value: number | null
    maxDiscount: number | null
    minSpend: number | null
    usageLimit: number | null
    usagePerUser: number | null
  }

  export type PromotionMinAggregateOutputType = {
    id: bigint | null
    code: string | null
    type: string | null
    value: number | null
    maxDiscount: number | null
    minSpend: number | null
    startsAt: Date | null
    endsAt: Date | null
    usageLimit: number | null
    usagePerUser: number | null
    active: boolean | null
    createdAt: Date | null
  }

  export type PromotionMaxAggregateOutputType = {
    id: bigint | null
    code: string | null
    type: string | null
    value: number | null
    maxDiscount: number | null
    minSpend: number | null
    startsAt: Date | null
    endsAt: Date | null
    usageLimit: number | null
    usagePerUser: number | null
    active: boolean | null
    createdAt: Date | null
  }

  export type PromotionCountAggregateOutputType = {
    id: number
    code: number
    type: number
    value: number
    maxDiscount: number
    minSpend: number
    startsAt: number
    endsAt: number
    usageLimit: number
    usagePerUser: number
    active: number
    createdAt: number
    _all: number
  }


  export type PromotionAvgAggregateInputType = {
    id?: true
    value?: true
    maxDiscount?: true
    minSpend?: true
    usageLimit?: true
    usagePerUser?: true
  }

  export type PromotionSumAggregateInputType = {
    id?: true
    value?: true
    maxDiscount?: true
    minSpend?: true
    usageLimit?: true
    usagePerUser?: true
  }

  export type PromotionMinAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
    maxDiscount?: true
    minSpend?: true
    startsAt?: true
    endsAt?: true
    usageLimit?: true
    usagePerUser?: true
    active?: true
    createdAt?: true
  }

  export type PromotionMaxAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
    maxDiscount?: true
    minSpend?: true
    startsAt?: true
    endsAt?: true
    usageLimit?: true
    usagePerUser?: true
    active?: true
    createdAt?: true
  }

  export type PromotionCountAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
    maxDiscount?: true
    minSpend?: true
    startsAt?: true
    endsAt?: true
    usageLimit?: true
    usagePerUser?: true
    active?: true
    createdAt?: true
    _all?: true
  }

  export type PromotionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which promotion to aggregate.
     */
    where?: promotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotions to fetch.
     */
    orderBy?: promotionOrderByWithRelationInput | promotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: promotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned promotions
    **/
    _count?: true | PromotionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromotionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromotionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromotionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromotionMaxAggregateInputType
  }

  export type GetPromotionAggregateType<T extends PromotionAggregateArgs> = {
        [P in keyof T & keyof AggregatePromotion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromotion[P]>
      : GetScalarType<T[P], AggregatePromotion[P]>
  }




  export type promotionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: promotionWhereInput
    orderBy?: promotionOrderByWithAggregationInput | promotionOrderByWithAggregationInput[]
    by: PromotionScalarFieldEnum[] | PromotionScalarFieldEnum
    having?: promotionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromotionCountAggregateInputType | true
    _avg?: PromotionAvgAggregateInputType
    _sum?: PromotionSumAggregateInputType
    _min?: PromotionMinAggregateInputType
    _max?: PromotionMaxAggregateInputType
  }

  export type PromotionGroupByOutputType = {
    id: bigint
    code: string
    type: string
    value: number
    maxDiscount: number | null
    minSpend: number | null
    startsAt: Date | null
    endsAt: Date | null
    usageLimit: number | null
    usagePerUser: number | null
    active: boolean
    createdAt: Date
    _count: PromotionCountAggregateOutputType | null
    _avg: PromotionAvgAggregateOutputType | null
    _sum: PromotionSumAggregateOutputType | null
    _min: PromotionMinAggregateOutputType | null
    _max: PromotionMaxAggregateOutputType | null
  }

  type GetPromotionGroupByPayload<T extends promotionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromotionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromotionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromotionGroupByOutputType[P]>
            : GetScalarType<T[P], PromotionGroupByOutputType[P]>
        }
      >
    >


  export type promotionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
    maxDiscount?: boolean
    minSpend?: boolean
    startsAt?: boolean
    endsAt?: boolean
    usageLimit?: boolean
    usagePerUser?: boolean
    active?: boolean
    createdAt?: boolean
    redemptions?: boolean | promotion$redemptionsArgs<ExtArgs>
    _count?: boolean | PromotionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotion"]>

  export type promotionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
    maxDiscount?: boolean
    minSpend?: boolean
    startsAt?: boolean
    endsAt?: boolean
    usageLimit?: boolean
    usagePerUser?: boolean
    active?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["promotion"]>

  export type promotionSelectScalar = {
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
    maxDiscount?: boolean
    minSpend?: boolean
    startsAt?: boolean
    endsAt?: boolean
    usageLimit?: boolean
    usagePerUser?: boolean
    active?: boolean
    createdAt?: boolean
  }

  export type promotionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    redemptions?: boolean | promotion$redemptionsArgs<ExtArgs>
    _count?: boolean | PromotionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type promotionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $promotionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "promotion"
    objects: {
      redemptions: Prisma.$promotionredemptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      code: string
      type: string
      value: number
      maxDiscount: number | null
      minSpend: number | null
      startsAt: Date | null
      endsAt: Date | null
      usageLimit: number | null
      usagePerUser: number | null
      active: boolean
      createdAt: Date
    }, ExtArgs["result"]["promotion"]>
    composites: {}
  }

  type promotionGetPayload<S extends boolean | null | undefined | promotionDefaultArgs> = $Result.GetResult<Prisma.$promotionPayload, S>

  type promotionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<promotionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PromotionCountAggregateInputType | true
    }

  export interface promotionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['promotion'], meta: { name: 'promotion' } }
    /**
     * Find zero or one Promotion that matches the filter.
     * @param {promotionFindUniqueArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends promotionFindUniqueArgs>(args: SelectSubset<T, promotionFindUniqueArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Promotion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {promotionFindUniqueOrThrowArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends promotionFindUniqueOrThrowArgs>(args: SelectSubset<T, promotionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Promotion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionFindFirstArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends promotionFindFirstArgs>(args?: SelectSubset<T, promotionFindFirstArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Promotion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionFindFirstOrThrowArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends promotionFindFirstOrThrowArgs>(args?: SelectSubset<T, promotionFindFirstOrThrowArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Promotions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Promotions
     * const promotions = await prisma.promotion.findMany()
     * 
     * // Get first 10 Promotions
     * const promotions = await prisma.promotion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promotionWithIdOnly = await prisma.promotion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends promotionFindManyArgs>(args?: SelectSubset<T, promotionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Promotion.
     * @param {promotionCreateArgs} args - Arguments to create a Promotion.
     * @example
     * // Create one Promotion
     * const Promotion = await prisma.promotion.create({
     *   data: {
     *     // ... data to create a Promotion
     *   }
     * })
     * 
     */
    create<T extends promotionCreateArgs>(args: SelectSubset<T, promotionCreateArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Promotions.
     * @param {promotionCreateManyArgs} args - Arguments to create many Promotions.
     * @example
     * // Create many Promotions
     * const promotion = await prisma.promotion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends promotionCreateManyArgs>(args?: SelectSubset<T, promotionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Promotions and returns the data saved in the database.
     * @param {promotionCreateManyAndReturnArgs} args - Arguments to create many Promotions.
     * @example
     * // Create many Promotions
     * const promotion = await prisma.promotion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Promotions and only return the `id`
     * const promotionWithIdOnly = await prisma.promotion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends promotionCreateManyAndReturnArgs>(args?: SelectSubset<T, promotionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Promotion.
     * @param {promotionDeleteArgs} args - Arguments to delete one Promotion.
     * @example
     * // Delete one Promotion
     * const Promotion = await prisma.promotion.delete({
     *   where: {
     *     // ... filter to delete one Promotion
     *   }
     * })
     * 
     */
    delete<T extends promotionDeleteArgs>(args: SelectSubset<T, promotionDeleteArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Promotion.
     * @param {promotionUpdateArgs} args - Arguments to update one Promotion.
     * @example
     * // Update one Promotion
     * const promotion = await prisma.promotion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends promotionUpdateArgs>(args: SelectSubset<T, promotionUpdateArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Promotions.
     * @param {promotionDeleteManyArgs} args - Arguments to filter Promotions to delete.
     * @example
     * // Delete a few Promotions
     * const { count } = await prisma.promotion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends promotionDeleteManyArgs>(args?: SelectSubset<T, promotionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Promotions
     * const promotion = await prisma.promotion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends promotionUpdateManyArgs>(args: SelectSubset<T, promotionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Promotion.
     * @param {promotionUpsertArgs} args - Arguments to update or create a Promotion.
     * @example
     * // Update or create a Promotion
     * const promotion = await prisma.promotion.upsert({
     *   create: {
     *     // ... data to create a Promotion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Promotion we want to update
     *   }
     * })
     */
    upsert<T extends promotionUpsertArgs>(args: SelectSubset<T, promotionUpsertArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionCountArgs} args - Arguments to filter Promotions to count.
     * @example
     * // Count the number of Promotions
     * const count = await prisma.promotion.count({
     *   where: {
     *     // ... the filter for the Promotions we want to count
     *   }
     * })
    **/
    count<T extends promotionCountArgs>(
      args?: Subset<T, promotionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromotionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Promotion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromotionAggregateArgs>(args: Subset<T, PromotionAggregateArgs>): Prisma.PrismaPromise<GetPromotionAggregateType<T>>

    /**
     * Group by Promotion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends promotionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: promotionGroupByArgs['orderBy'] }
        : { orderBy?: promotionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, promotionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromotionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the promotion model
   */
  readonly fields: promotionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for promotion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__promotionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    redemptions<T extends promotion$redemptionsArgs<ExtArgs> = {}>(args?: Subset<T, promotion$redemptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the promotion model
   */ 
  interface promotionFieldRefs {
    readonly id: FieldRef<"promotion", 'BigInt'>
    readonly code: FieldRef<"promotion", 'String'>
    readonly type: FieldRef<"promotion", 'String'>
    readonly value: FieldRef<"promotion", 'Float'>
    readonly maxDiscount: FieldRef<"promotion", 'Float'>
    readonly minSpend: FieldRef<"promotion", 'Float'>
    readonly startsAt: FieldRef<"promotion", 'DateTime'>
    readonly endsAt: FieldRef<"promotion", 'DateTime'>
    readonly usageLimit: FieldRef<"promotion", 'Int'>
    readonly usagePerUser: FieldRef<"promotion", 'Int'>
    readonly active: FieldRef<"promotion", 'Boolean'>
    readonly createdAt: FieldRef<"promotion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * promotion findUnique
   */
  export type promotionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter, which promotion to fetch.
     */
    where: promotionWhereUniqueInput
  }

  /**
   * promotion findUniqueOrThrow
   */
  export type promotionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter, which promotion to fetch.
     */
    where: promotionWhereUniqueInput
  }

  /**
   * promotion findFirst
   */
  export type promotionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter, which promotion to fetch.
     */
    where?: promotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotions to fetch.
     */
    orderBy?: promotionOrderByWithRelationInput | promotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for promotions.
     */
    cursor?: promotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of promotions.
     */
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * promotion findFirstOrThrow
   */
  export type promotionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter, which promotion to fetch.
     */
    where?: promotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotions to fetch.
     */
    orderBy?: promotionOrderByWithRelationInput | promotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for promotions.
     */
    cursor?: promotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of promotions.
     */
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * promotion findMany
   */
  export type promotionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter, which promotions to fetch.
     */
    where?: promotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotions to fetch.
     */
    orderBy?: promotionOrderByWithRelationInput | promotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing promotions.
     */
    cursor?: promotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotions.
     */
    skip?: number
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * promotion create
   */
  export type promotionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * The data needed to create a promotion.
     */
    data: XOR<promotionCreateInput, promotionUncheckedCreateInput>
  }

  /**
   * promotion createMany
   */
  export type promotionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many promotions.
     */
    data: promotionCreateManyInput | promotionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * promotion createManyAndReturn
   */
  export type promotionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many promotions.
     */
    data: promotionCreateManyInput | promotionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * promotion update
   */
  export type promotionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * The data needed to update a promotion.
     */
    data: XOR<promotionUpdateInput, promotionUncheckedUpdateInput>
    /**
     * Choose, which promotion to update.
     */
    where: promotionWhereUniqueInput
  }

  /**
   * promotion updateMany
   */
  export type promotionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update promotions.
     */
    data: XOR<promotionUpdateManyMutationInput, promotionUncheckedUpdateManyInput>
    /**
     * Filter which promotions to update
     */
    where?: promotionWhereInput
  }

  /**
   * promotion upsert
   */
  export type promotionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * The filter to search for the promotion to update in case it exists.
     */
    where: promotionWhereUniqueInput
    /**
     * In case the promotion found by the `where` argument doesn't exist, create a new promotion with this data.
     */
    create: XOR<promotionCreateInput, promotionUncheckedCreateInput>
    /**
     * In case the promotion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<promotionUpdateInput, promotionUncheckedUpdateInput>
  }

  /**
   * promotion delete
   */
  export type promotionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter which promotion to delete.
     */
    where: promotionWhereUniqueInput
  }

  /**
   * promotion deleteMany
   */
  export type promotionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which promotions to delete
     */
    where?: promotionWhereInput
  }

  /**
   * promotion.redemptions
   */
  export type promotion$redemptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    where?: promotionredemptionWhereInput
    orderBy?: promotionredemptionOrderByWithRelationInput | promotionredemptionOrderByWithRelationInput[]
    cursor?: promotionredemptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromotionredemptionScalarFieldEnum | PromotionredemptionScalarFieldEnum[]
  }

  /**
   * promotion without action
   */
  export type promotionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
  }


  /**
   * Model promotionredemption
   */

  export type AggregatePromotionredemption = {
    _count: PromotionredemptionCountAggregateOutputType | null
    _avg: PromotionredemptionAvgAggregateOutputType | null
    _sum: PromotionredemptionSumAggregateOutputType | null
    _min: PromotionredemptionMinAggregateOutputType | null
    _max: PromotionredemptionMaxAggregateOutputType | null
  }

  export type PromotionredemptionAvgAggregateOutputType = {
    id: number | null
    promotionId: number | null
    userId: number | null
    orderId: number | null
  }

  export type PromotionredemptionSumAggregateOutputType = {
    id: bigint | null
    promotionId: bigint | null
    userId: bigint | null
    orderId: bigint | null
  }

  export type PromotionredemptionMinAggregateOutputType = {
    id: bigint | null
    promotionId: bigint | null
    userId: bigint | null
    orderId: bigint | null
    email: string | null
    redeemedAt: Date | null
  }

  export type PromotionredemptionMaxAggregateOutputType = {
    id: bigint | null
    promotionId: bigint | null
    userId: bigint | null
    orderId: bigint | null
    email: string | null
    redeemedAt: Date | null
  }

  export type PromotionredemptionCountAggregateOutputType = {
    id: number
    promotionId: number
    userId: number
    orderId: number
    email: number
    redeemedAt: number
    _all: number
  }


  export type PromotionredemptionAvgAggregateInputType = {
    id?: true
    promotionId?: true
    userId?: true
    orderId?: true
  }

  export type PromotionredemptionSumAggregateInputType = {
    id?: true
    promotionId?: true
    userId?: true
    orderId?: true
  }

  export type PromotionredemptionMinAggregateInputType = {
    id?: true
    promotionId?: true
    userId?: true
    orderId?: true
    email?: true
    redeemedAt?: true
  }

  export type PromotionredemptionMaxAggregateInputType = {
    id?: true
    promotionId?: true
    userId?: true
    orderId?: true
    email?: true
    redeemedAt?: true
  }

  export type PromotionredemptionCountAggregateInputType = {
    id?: true
    promotionId?: true
    userId?: true
    orderId?: true
    email?: true
    redeemedAt?: true
    _all?: true
  }

  export type PromotionredemptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which promotionredemption to aggregate.
     */
    where?: promotionredemptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotionredemptions to fetch.
     */
    orderBy?: promotionredemptionOrderByWithRelationInput | promotionredemptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: promotionredemptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotionredemptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotionredemptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned promotionredemptions
    **/
    _count?: true | PromotionredemptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromotionredemptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromotionredemptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromotionredemptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromotionredemptionMaxAggregateInputType
  }

  export type GetPromotionredemptionAggregateType<T extends PromotionredemptionAggregateArgs> = {
        [P in keyof T & keyof AggregatePromotionredemption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromotionredemption[P]>
      : GetScalarType<T[P], AggregatePromotionredemption[P]>
  }




  export type promotionredemptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: promotionredemptionWhereInput
    orderBy?: promotionredemptionOrderByWithAggregationInput | promotionredemptionOrderByWithAggregationInput[]
    by: PromotionredemptionScalarFieldEnum[] | PromotionredemptionScalarFieldEnum
    having?: promotionredemptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromotionredemptionCountAggregateInputType | true
    _avg?: PromotionredemptionAvgAggregateInputType
    _sum?: PromotionredemptionSumAggregateInputType
    _min?: PromotionredemptionMinAggregateInputType
    _max?: PromotionredemptionMaxAggregateInputType
  }

  export type PromotionredemptionGroupByOutputType = {
    id: bigint
    promotionId: bigint
    userId: bigint | null
    orderId: bigint | null
    email: string | null
    redeemedAt: Date
    _count: PromotionredemptionCountAggregateOutputType | null
    _avg: PromotionredemptionAvgAggregateOutputType | null
    _sum: PromotionredemptionSumAggregateOutputType | null
    _min: PromotionredemptionMinAggregateOutputType | null
    _max: PromotionredemptionMaxAggregateOutputType | null
  }

  type GetPromotionredemptionGroupByPayload<T extends promotionredemptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromotionredemptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromotionredemptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromotionredemptionGroupByOutputType[P]>
            : GetScalarType<T[P], PromotionredemptionGroupByOutputType[P]>
        }
      >
    >


  export type promotionredemptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    promotionId?: boolean
    userId?: boolean
    orderId?: boolean
    email?: boolean
    redeemedAt?: boolean
    promotion?: boolean | promotionDefaultArgs<ExtArgs>
    user?: boolean | promotionredemption$userArgs<ExtArgs>
    order?: boolean | promotionredemption$orderArgs<ExtArgs>
  }, ExtArgs["result"]["promotionredemption"]>

  export type promotionredemptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    promotionId?: boolean
    userId?: boolean
    orderId?: boolean
    email?: boolean
    redeemedAt?: boolean
    promotion?: boolean | promotionDefaultArgs<ExtArgs>
    user?: boolean | promotionredemption$userArgs<ExtArgs>
    order?: boolean | promotionredemption$orderArgs<ExtArgs>
  }, ExtArgs["result"]["promotionredemption"]>

  export type promotionredemptionSelectScalar = {
    id?: boolean
    promotionId?: boolean
    userId?: boolean
    orderId?: boolean
    email?: boolean
    redeemedAt?: boolean
  }

  export type promotionredemptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | promotionDefaultArgs<ExtArgs>
    user?: boolean | promotionredemption$userArgs<ExtArgs>
    order?: boolean | promotionredemption$orderArgs<ExtArgs>
  }
  export type promotionredemptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | promotionDefaultArgs<ExtArgs>
    user?: boolean | promotionredemption$userArgs<ExtArgs>
    order?: boolean | promotionredemption$orderArgs<ExtArgs>
  }

  export type $promotionredemptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "promotionredemption"
    objects: {
      promotion: Prisma.$promotionPayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs> | null
      order: Prisma.$orderPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      promotionId: bigint
      userId: bigint | null
      orderId: bigint | null
      email: string | null
      redeemedAt: Date
    }, ExtArgs["result"]["promotionredemption"]>
    composites: {}
  }

  type promotionredemptionGetPayload<S extends boolean | null | undefined | promotionredemptionDefaultArgs> = $Result.GetResult<Prisma.$promotionredemptionPayload, S>

  type promotionredemptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<promotionredemptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PromotionredemptionCountAggregateInputType | true
    }

  export interface promotionredemptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['promotionredemption'], meta: { name: 'promotionredemption' } }
    /**
     * Find zero or one Promotionredemption that matches the filter.
     * @param {promotionredemptionFindUniqueArgs} args - Arguments to find a Promotionredemption
     * @example
     * // Get one Promotionredemption
     * const promotionredemption = await prisma.promotionredemption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends promotionredemptionFindUniqueArgs>(args: SelectSubset<T, promotionredemptionFindUniqueArgs<ExtArgs>>): Prisma__promotionredemptionClient<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Promotionredemption that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {promotionredemptionFindUniqueOrThrowArgs} args - Arguments to find a Promotionredemption
     * @example
     * // Get one Promotionredemption
     * const promotionredemption = await prisma.promotionredemption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends promotionredemptionFindUniqueOrThrowArgs>(args: SelectSubset<T, promotionredemptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__promotionredemptionClient<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Promotionredemption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionredemptionFindFirstArgs} args - Arguments to find a Promotionredemption
     * @example
     * // Get one Promotionredemption
     * const promotionredemption = await prisma.promotionredemption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends promotionredemptionFindFirstArgs>(args?: SelectSubset<T, promotionredemptionFindFirstArgs<ExtArgs>>): Prisma__promotionredemptionClient<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Promotionredemption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionredemptionFindFirstOrThrowArgs} args - Arguments to find a Promotionredemption
     * @example
     * // Get one Promotionredemption
     * const promotionredemption = await prisma.promotionredemption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends promotionredemptionFindFirstOrThrowArgs>(args?: SelectSubset<T, promotionredemptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__promotionredemptionClient<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Promotionredemptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionredemptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Promotionredemptions
     * const promotionredemptions = await prisma.promotionredemption.findMany()
     * 
     * // Get first 10 Promotionredemptions
     * const promotionredemptions = await prisma.promotionredemption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promotionredemptionWithIdOnly = await prisma.promotionredemption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends promotionredemptionFindManyArgs>(args?: SelectSubset<T, promotionredemptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Promotionredemption.
     * @param {promotionredemptionCreateArgs} args - Arguments to create a Promotionredemption.
     * @example
     * // Create one Promotionredemption
     * const Promotionredemption = await prisma.promotionredemption.create({
     *   data: {
     *     // ... data to create a Promotionredemption
     *   }
     * })
     * 
     */
    create<T extends promotionredemptionCreateArgs>(args: SelectSubset<T, promotionredemptionCreateArgs<ExtArgs>>): Prisma__promotionredemptionClient<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Promotionredemptions.
     * @param {promotionredemptionCreateManyArgs} args - Arguments to create many Promotionredemptions.
     * @example
     * // Create many Promotionredemptions
     * const promotionredemption = await prisma.promotionredemption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends promotionredemptionCreateManyArgs>(args?: SelectSubset<T, promotionredemptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Promotionredemptions and returns the data saved in the database.
     * @param {promotionredemptionCreateManyAndReturnArgs} args - Arguments to create many Promotionredemptions.
     * @example
     * // Create many Promotionredemptions
     * const promotionredemption = await prisma.promotionredemption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Promotionredemptions and only return the `id`
     * const promotionredemptionWithIdOnly = await prisma.promotionredemption.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends promotionredemptionCreateManyAndReturnArgs>(args?: SelectSubset<T, promotionredemptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Promotionredemption.
     * @param {promotionredemptionDeleteArgs} args - Arguments to delete one Promotionredemption.
     * @example
     * // Delete one Promotionredemption
     * const Promotionredemption = await prisma.promotionredemption.delete({
     *   where: {
     *     // ... filter to delete one Promotionredemption
     *   }
     * })
     * 
     */
    delete<T extends promotionredemptionDeleteArgs>(args: SelectSubset<T, promotionredemptionDeleteArgs<ExtArgs>>): Prisma__promotionredemptionClient<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Promotionredemption.
     * @param {promotionredemptionUpdateArgs} args - Arguments to update one Promotionredemption.
     * @example
     * // Update one Promotionredemption
     * const promotionredemption = await prisma.promotionredemption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends promotionredemptionUpdateArgs>(args: SelectSubset<T, promotionredemptionUpdateArgs<ExtArgs>>): Prisma__promotionredemptionClient<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Promotionredemptions.
     * @param {promotionredemptionDeleteManyArgs} args - Arguments to filter Promotionredemptions to delete.
     * @example
     * // Delete a few Promotionredemptions
     * const { count } = await prisma.promotionredemption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends promotionredemptionDeleteManyArgs>(args?: SelectSubset<T, promotionredemptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promotionredemptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionredemptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Promotionredemptions
     * const promotionredemption = await prisma.promotionredemption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends promotionredemptionUpdateManyArgs>(args: SelectSubset<T, promotionredemptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Promotionredemption.
     * @param {promotionredemptionUpsertArgs} args - Arguments to update or create a Promotionredemption.
     * @example
     * // Update or create a Promotionredemption
     * const promotionredemption = await prisma.promotionredemption.upsert({
     *   create: {
     *     // ... data to create a Promotionredemption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Promotionredemption we want to update
     *   }
     * })
     */
    upsert<T extends promotionredemptionUpsertArgs>(args: SelectSubset<T, promotionredemptionUpsertArgs<ExtArgs>>): Prisma__promotionredemptionClient<$Result.GetResult<Prisma.$promotionredemptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Promotionredemptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionredemptionCountArgs} args - Arguments to filter Promotionredemptions to count.
     * @example
     * // Count the number of Promotionredemptions
     * const count = await prisma.promotionredemption.count({
     *   where: {
     *     // ... the filter for the Promotionredemptions we want to count
     *   }
     * })
    **/
    count<T extends promotionredemptionCountArgs>(
      args?: Subset<T, promotionredemptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromotionredemptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Promotionredemption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionredemptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromotionredemptionAggregateArgs>(args: Subset<T, PromotionredemptionAggregateArgs>): Prisma.PrismaPromise<GetPromotionredemptionAggregateType<T>>

    /**
     * Group by Promotionredemption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionredemptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends promotionredemptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: promotionredemptionGroupByArgs['orderBy'] }
        : { orderBy?: promotionredemptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, promotionredemptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromotionredemptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the promotionredemption model
   */
  readonly fields: promotionredemptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for promotionredemption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__promotionredemptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    promotion<T extends promotionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, promotionDefaultArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends promotionredemption$userArgs<ExtArgs> = {}>(args?: Subset<T, promotionredemption$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    order<T extends promotionredemption$orderArgs<ExtArgs> = {}>(args?: Subset<T, promotionredemption$orderArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the promotionredemption model
   */ 
  interface promotionredemptionFieldRefs {
    readonly id: FieldRef<"promotionredemption", 'BigInt'>
    readonly promotionId: FieldRef<"promotionredemption", 'BigInt'>
    readonly userId: FieldRef<"promotionredemption", 'BigInt'>
    readonly orderId: FieldRef<"promotionredemption", 'BigInt'>
    readonly email: FieldRef<"promotionredemption", 'String'>
    readonly redeemedAt: FieldRef<"promotionredemption", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * promotionredemption findUnique
   */
  export type promotionredemptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    /**
     * Filter, which promotionredemption to fetch.
     */
    where: promotionredemptionWhereUniqueInput
  }

  /**
   * promotionredemption findUniqueOrThrow
   */
  export type promotionredemptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    /**
     * Filter, which promotionredemption to fetch.
     */
    where: promotionredemptionWhereUniqueInput
  }

  /**
   * promotionredemption findFirst
   */
  export type promotionredemptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    /**
     * Filter, which promotionredemption to fetch.
     */
    where?: promotionredemptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotionredemptions to fetch.
     */
    orderBy?: promotionredemptionOrderByWithRelationInput | promotionredemptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for promotionredemptions.
     */
    cursor?: promotionredemptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotionredemptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotionredemptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of promotionredemptions.
     */
    distinct?: PromotionredemptionScalarFieldEnum | PromotionredemptionScalarFieldEnum[]
  }

  /**
   * promotionredemption findFirstOrThrow
   */
  export type promotionredemptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    /**
     * Filter, which promotionredemption to fetch.
     */
    where?: promotionredemptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotionredemptions to fetch.
     */
    orderBy?: promotionredemptionOrderByWithRelationInput | promotionredemptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for promotionredemptions.
     */
    cursor?: promotionredemptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotionredemptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotionredemptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of promotionredemptions.
     */
    distinct?: PromotionredemptionScalarFieldEnum | PromotionredemptionScalarFieldEnum[]
  }

  /**
   * promotionredemption findMany
   */
  export type promotionredemptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    /**
     * Filter, which promotionredemptions to fetch.
     */
    where?: promotionredemptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotionredemptions to fetch.
     */
    orderBy?: promotionredemptionOrderByWithRelationInput | promotionredemptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing promotionredemptions.
     */
    cursor?: promotionredemptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotionredemptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotionredemptions.
     */
    skip?: number
    distinct?: PromotionredemptionScalarFieldEnum | PromotionredemptionScalarFieldEnum[]
  }

  /**
   * promotionredemption create
   */
  export type promotionredemptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    /**
     * The data needed to create a promotionredemption.
     */
    data: XOR<promotionredemptionCreateInput, promotionredemptionUncheckedCreateInput>
  }

  /**
   * promotionredemption createMany
   */
  export type promotionredemptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many promotionredemptions.
     */
    data: promotionredemptionCreateManyInput | promotionredemptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * promotionredemption createManyAndReturn
   */
  export type promotionredemptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many promotionredemptions.
     */
    data: promotionredemptionCreateManyInput | promotionredemptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * promotionredemption update
   */
  export type promotionredemptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    /**
     * The data needed to update a promotionredemption.
     */
    data: XOR<promotionredemptionUpdateInput, promotionredemptionUncheckedUpdateInput>
    /**
     * Choose, which promotionredemption to update.
     */
    where: promotionredemptionWhereUniqueInput
  }

  /**
   * promotionredemption updateMany
   */
  export type promotionredemptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update promotionredemptions.
     */
    data: XOR<promotionredemptionUpdateManyMutationInput, promotionredemptionUncheckedUpdateManyInput>
    /**
     * Filter which promotionredemptions to update
     */
    where?: promotionredemptionWhereInput
  }

  /**
   * promotionredemption upsert
   */
  export type promotionredemptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    /**
     * The filter to search for the promotionredemption to update in case it exists.
     */
    where: promotionredemptionWhereUniqueInput
    /**
     * In case the promotionredemption found by the `where` argument doesn't exist, create a new promotionredemption with this data.
     */
    create: XOR<promotionredemptionCreateInput, promotionredemptionUncheckedCreateInput>
    /**
     * In case the promotionredemption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<promotionredemptionUpdateInput, promotionredemptionUncheckedUpdateInput>
  }

  /**
   * promotionredemption delete
   */
  export type promotionredemptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
    /**
     * Filter which promotionredemption to delete.
     */
    where: promotionredemptionWhereUniqueInput
  }

  /**
   * promotionredemption deleteMany
   */
  export type promotionredemptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which promotionredemptions to delete
     */
    where?: promotionredemptionWhereInput
  }

  /**
   * promotionredemption.user
   */
  export type promotionredemption$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * promotionredemption.order
   */
  export type promotionredemption$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    where?: orderWhereInput
  }

  /**
   * promotionredemption without action
   */
  export type promotionredemptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotionredemption
     */
    select?: promotionredemptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionredemptionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MovieScalarFieldEnum: {
    id: 'id',
    title: 'title',
    durationMin: 'durationMin',
    rating: 'rating',
    createdAt: 'createdAt',
    posterUrl: 'posterUrl',
    overview: 'overview',
    active: 'active'
  };

  export type MovieScalarFieldEnum = (typeof MovieScalarFieldEnum)[keyof typeof MovieScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    refCode: 'refCode',
    status: 'status',
    totalAmount: 'totalAmount',
    discountAmt: 'discountAmt',
    promoCode: 'promoCode',
    paidAt: 'paidAt',
    createdAt: 'createdAt',
    showtimeId: 'showtimeId',
    userId: 'userId',
    buyerEmail: 'buyerEmail'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const PasswordresettokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    used: 'used',
    createdAt: 'createdAt'
  };

  export type PasswordresettokenScalarFieldEnum = (typeof PasswordresettokenScalarFieldEnum)[keyof typeof PasswordresettokenScalarFieldEnum]


  export const SeatlockScalarFieldEnum: {
    showtimeId: 'showtimeId',
    seatLabel: 'seatLabel',
    lockedUntil: 'lockedUntil',
    refCode: 'refCode'
  };

  export type SeatlockScalarFieldEnum = (typeof SeatlockScalarFieldEnum)[keyof typeof SeatlockScalarFieldEnum]


  export const ShowtimeScalarFieldEnum: {
    id: 'id',
    movieId: 'movieId',
    theater: 'theater',
    startsAt: 'startsAt',
    basePrice: 'basePrice'
  };

  export type ShowtimeScalarFieldEnum = (typeof ShowtimeScalarFieldEnum)[keyof typeof ShowtimeScalarFieldEnum]


  export const TicketScalarFieldEnum: {
    id: 'id',
    seatLabel: 'seatLabel',
    price: 'price',
    createdAt: 'createdAt',
    orderId: 'orderId'
  };

  export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    displayName: 'displayName',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PromotionScalarFieldEnum: {
    id: 'id',
    code: 'code',
    type: 'type',
    value: 'value',
    maxDiscount: 'maxDiscount',
    minSpend: 'minSpend',
    startsAt: 'startsAt',
    endsAt: 'endsAt',
    usageLimit: 'usageLimit',
    usagePerUser: 'usagePerUser',
    active: 'active',
    createdAt: 'createdAt'
  };

  export type PromotionScalarFieldEnum = (typeof PromotionScalarFieldEnum)[keyof typeof PromotionScalarFieldEnum]


  export const PromotionredemptionScalarFieldEnum: {
    id: 'id',
    promotionId: 'promotionId',
    userId: 'userId',
    orderId: 'orderId',
    email: 'email',
    redeemedAt: 'redeemedAt'
  };

  export type PromotionredemptionScalarFieldEnum = (typeof PromotionredemptionScalarFieldEnum)[keyof typeof PromotionredemptionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    
  /**
   * Deep Input Types
   */


  export type movieWhereInput = {
    AND?: movieWhereInput | movieWhereInput[]
    OR?: movieWhereInput[]
    NOT?: movieWhereInput | movieWhereInput[]
    id?: BigIntFilter<"movie"> | bigint | number
    title?: StringFilter<"movie"> | string
    durationMin?: IntFilter<"movie"> | number
    rating?: StringNullableFilter<"movie"> | string | null
    createdAt?: DateTimeFilter<"movie"> | Date | string
    posterUrl?: StringNullableFilter<"movie"> | string | null
    overview?: StringNullableFilter<"movie"> | string | null
    active?: BoolFilter<"movie"> | boolean
    showtime?: ShowtimeListRelationFilter
  }

  export type movieOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    durationMin?: SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    posterUrl?: SortOrderInput | SortOrder
    overview?: SortOrderInput | SortOrder
    active?: SortOrder
    showtime?: showtimeOrderByRelationAggregateInput
  }

  export type movieWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: movieWhereInput | movieWhereInput[]
    OR?: movieWhereInput[]
    NOT?: movieWhereInput | movieWhereInput[]
    title?: StringFilter<"movie"> | string
    durationMin?: IntFilter<"movie"> | number
    rating?: StringNullableFilter<"movie"> | string | null
    createdAt?: DateTimeFilter<"movie"> | Date | string
    posterUrl?: StringNullableFilter<"movie"> | string | null
    overview?: StringNullableFilter<"movie"> | string | null
    active?: BoolFilter<"movie"> | boolean
    showtime?: ShowtimeListRelationFilter
  }, "id">

  export type movieOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    durationMin?: SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    posterUrl?: SortOrderInput | SortOrder
    overview?: SortOrderInput | SortOrder
    active?: SortOrder
    _count?: movieCountOrderByAggregateInput
    _avg?: movieAvgOrderByAggregateInput
    _max?: movieMaxOrderByAggregateInput
    _min?: movieMinOrderByAggregateInput
    _sum?: movieSumOrderByAggregateInput
  }

  export type movieScalarWhereWithAggregatesInput = {
    AND?: movieScalarWhereWithAggregatesInput | movieScalarWhereWithAggregatesInput[]
    OR?: movieScalarWhereWithAggregatesInput[]
    NOT?: movieScalarWhereWithAggregatesInput | movieScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"movie"> | bigint | number
    title?: StringWithAggregatesFilter<"movie"> | string
    durationMin?: IntWithAggregatesFilter<"movie"> | number
    rating?: StringNullableWithAggregatesFilter<"movie"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"movie"> | Date | string
    posterUrl?: StringNullableWithAggregatesFilter<"movie"> | string | null
    overview?: StringNullableWithAggregatesFilter<"movie"> | string | null
    active?: BoolWithAggregatesFilter<"movie"> | boolean
  }

  export type orderWhereInput = {
    AND?: orderWhereInput | orderWhereInput[]
    OR?: orderWhereInput[]
    NOT?: orderWhereInput | orderWhereInput[]
    id?: BigIntFilter<"order"> | bigint | number
    refCode?: StringFilter<"order"> | string
    status?: StringFilter<"order"> | string
    totalAmount?: FloatFilter<"order"> | number
    discountAmt?: FloatFilter<"order"> | number
    promoCode?: StringNullableFilter<"order"> | string | null
    paidAt?: DateTimeNullableFilter<"order"> | Date | string | null
    createdAt?: DateTimeFilter<"order"> | Date | string
    showtimeId?: BigIntFilter<"order"> | bigint | number
    userId?: BigIntNullableFilter<"order"> | bigint | number | null
    buyerEmail?: StringNullableFilter<"order"> | string | null
    showtime?: XOR<ShowtimeRelationFilter, showtimeWhereInput>
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    tickets?: TicketListRelationFilter
    promotionredemption?: PromotionredemptionListRelationFilter
  }

  export type orderOrderByWithRelationInput = {
    id?: SortOrder
    refCode?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    discountAmt?: SortOrder
    promoCode?: SortOrderInput | SortOrder
    paidAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    showtimeId?: SortOrder
    userId?: SortOrderInput | SortOrder
    buyerEmail?: SortOrderInput | SortOrder
    showtime?: showtimeOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    tickets?: ticketOrderByRelationAggregateInput
    promotionredemption?: promotionredemptionOrderByRelationAggregateInput
  }

  export type orderWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    refCode?: string
    AND?: orderWhereInput | orderWhereInput[]
    OR?: orderWhereInput[]
    NOT?: orderWhereInput | orderWhereInput[]
    status?: StringFilter<"order"> | string
    totalAmount?: FloatFilter<"order"> | number
    discountAmt?: FloatFilter<"order"> | number
    promoCode?: StringNullableFilter<"order"> | string | null
    paidAt?: DateTimeNullableFilter<"order"> | Date | string | null
    createdAt?: DateTimeFilter<"order"> | Date | string
    showtimeId?: BigIntFilter<"order"> | bigint | number
    userId?: BigIntNullableFilter<"order"> | bigint | number | null
    buyerEmail?: StringNullableFilter<"order"> | string | null
    showtime?: XOR<ShowtimeRelationFilter, showtimeWhereInput>
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    tickets?: TicketListRelationFilter
    promotionredemption?: PromotionredemptionListRelationFilter
  }, "id" | "refCode">

  export type orderOrderByWithAggregationInput = {
    id?: SortOrder
    refCode?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    discountAmt?: SortOrder
    promoCode?: SortOrderInput | SortOrder
    paidAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    showtimeId?: SortOrder
    userId?: SortOrderInput | SortOrder
    buyerEmail?: SortOrderInput | SortOrder
    _count?: orderCountOrderByAggregateInput
    _avg?: orderAvgOrderByAggregateInput
    _max?: orderMaxOrderByAggregateInput
    _min?: orderMinOrderByAggregateInput
    _sum?: orderSumOrderByAggregateInput
  }

  export type orderScalarWhereWithAggregatesInput = {
    AND?: orderScalarWhereWithAggregatesInput | orderScalarWhereWithAggregatesInput[]
    OR?: orderScalarWhereWithAggregatesInput[]
    NOT?: orderScalarWhereWithAggregatesInput | orderScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"order"> | bigint | number
    refCode?: StringWithAggregatesFilter<"order"> | string
    status?: StringWithAggregatesFilter<"order"> | string
    totalAmount?: FloatWithAggregatesFilter<"order"> | number
    discountAmt?: FloatWithAggregatesFilter<"order"> | number
    promoCode?: StringNullableWithAggregatesFilter<"order"> | string | null
    paidAt?: DateTimeNullableWithAggregatesFilter<"order"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"order"> | Date | string
    showtimeId?: BigIntWithAggregatesFilter<"order"> | bigint | number
    userId?: BigIntNullableWithAggregatesFilter<"order"> | bigint | number | null
    buyerEmail?: StringNullableWithAggregatesFilter<"order"> | string | null
  }

  export type passwordresettokenWhereInput = {
    AND?: passwordresettokenWhereInput | passwordresettokenWhereInput[]
    OR?: passwordresettokenWhereInput[]
    NOT?: passwordresettokenWhereInput | passwordresettokenWhereInput[]
    id?: BigIntFilter<"passwordresettoken"> | bigint | number
    userId?: BigIntFilter<"passwordresettoken"> | bigint | number
    token?: StringFilter<"passwordresettoken"> | string
    expiresAt?: DateTimeFilter<"passwordresettoken"> | Date | string
    used?: BoolFilter<"passwordresettoken"> | boolean
    createdAt?: DateTimeFilter<"passwordresettoken"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type passwordresettokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type passwordresettokenWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    token?: string
    AND?: passwordresettokenWhereInput | passwordresettokenWhereInput[]
    OR?: passwordresettokenWhereInput[]
    NOT?: passwordresettokenWhereInput | passwordresettokenWhereInput[]
    userId?: BigIntFilter<"passwordresettoken"> | bigint | number
    expiresAt?: DateTimeFilter<"passwordresettoken"> | Date | string
    used?: BoolFilter<"passwordresettoken"> | boolean
    createdAt?: DateTimeFilter<"passwordresettoken"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
  }, "id" | "token">

  export type passwordresettokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    _count?: passwordresettokenCountOrderByAggregateInput
    _avg?: passwordresettokenAvgOrderByAggregateInput
    _max?: passwordresettokenMaxOrderByAggregateInput
    _min?: passwordresettokenMinOrderByAggregateInput
    _sum?: passwordresettokenSumOrderByAggregateInput
  }

  export type passwordresettokenScalarWhereWithAggregatesInput = {
    AND?: passwordresettokenScalarWhereWithAggregatesInput | passwordresettokenScalarWhereWithAggregatesInput[]
    OR?: passwordresettokenScalarWhereWithAggregatesInput[]
    NOT?: passwordresettokenScalarWhereWithAggregatesInput | passwordresettokenScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"passwordresettoken"> | bigint | number
    userId?: BigIntWithAggregatesFilter<"passwordresettoken"> | bigint | number
    token?: StringWithAggregatesFilter<"passwordresettoken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"passwordresettoken"> | Date | string
    used?: BoolWithAggregatesFilter<"passwordresettoken"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"passwordresettoken"> | Date | string
  }

  export type seatlockWhereInput = {
    AND?: seatlockWhereInput | seatlockWhereInput[]
    OR?: seatlockWhereInput[]
    NOT?: seatlockWhereInput | seatlockWhereInput[]
    showtimeId?: BigIntFilter<"seatlock"> | bigint | number
    seatLabel?: StringFilter<"seatlock"> | string
    lockedUntil?: DateTimeFilter<"seatlock"> | Date | string
    refCode?: StringFilter<"seatlock"> | string
    showtime?: XOR<ShowtimeRelationFilter, showtimeWhereInput>
  }

  export type seatlockOrderByWithRelationInput = {
    showtimeId?: SortOrder
    seatLabel?: SortOrder
    lockedUntil?: SortOrder
    refCode?: SortOrder
    showtime?: showtimeOrderByWithRelationInput
  }

  export type seatlockWhereUniqueInput = Prisma.AtLeast<{
    showtimeId_seatLabel?: seatlockShowtimeIdSeatLabelCompoundUniqueInput
    AND?: seatlockWhereInput | seatlockWhereInput[]
    OR?: seatlockWhereInput[]
    NOT?: seatlockWhereInput | seatlockWhereInput[]
    showtimeId?: BigIntFilter<"seatlock"> | bigint | number
    seatLabel?: StringFilter<"seatlock"> | string
    lockedUntil?: DateTimeFilter<"seatlock"> | Date | string
    refCode?: StringFilter<"seatlock"> | string
    showtime?: XOR<ShowtimeRelationFilter, showtimeWhereInput>
  }, "showtimeId_seatLabel">

  export type seatlockOrderByWithAggregationInput = {
    showtimeId?: SortOrder
    seatLabel?: SortOrder
    lockedUntil?: SortOrder
    refCode?: SortOrder
    _count?: seatlockCountOrderByAggregateInput
    _avg?: seatlockAvgOrderByAggregateInput
    _max?: seatlockMaxOrderByAggregateInput
    _min?: seatlockMinOrderByAggregateInput
    _sum?: seatlockSumOrderByAggregateInput
  }

  export type seatlockScalarWhereWithAggregatesInput = {
    AND?: seatlockScalarWhereWithAggregatesInput | seatlockScalarWhereWithAggregatesInput[]
    OR?: seatlockScalarWhereWithAggregatesInput[]
    NOT?: seatlockScalarWhereWithAggregatesInput | seatlockScalarWhereWithAggregatesInput[]
    showtimeId?: BigIntWithAggregatesFilter<"seatlock"> | bigint | number
    seatLabel?: StringWithAggregatesFilter<"seatlock"> | string
    lockedUntil?: DateTimeWithAggregatesFilter<"seatlock"> | Date | string
    refCode?: StringWithAggregatesFilter<"seatlock"> | string
  }

  export type showtimeWhereInput = {
    AND?: showtimeWhereInput | showtimeWhereInput[]
    OR?: showtimeWhereInput[]
    NOT?: showtimeWhereInput | showtimeWhereInput[]
    id?: BigIntFilter<"showtime"> | bigint | number
    movieId?: BigIntFilter<"showtime"> | bigint | number
    theater?: StringFilter<"showtime"> | string
    startsAt?: DateTimeFilter<"showtime"> | Date | string
    basePrice?: DecimalFilter<"showtime"> | Decimal | DecimalJsLike | number | string
    order?: OrderListRelationFilter
    seatlock?: SeatlockListRelationFilter
    movie?: XOR<MovieRelationFilter, movieWhereInput>
  }

  export type showtimeOrderByWithRelationInput = {
    id?: SortOrder
    movieId?: SortOrder
    theater?: SortOrder
    startsAt?: SortOrder
    basePrice?: SortOrder
    order?: orderOrderByRelationAggregateInput
    seatlock?: seatlockOrderByRelationAggregateInput
    movie?: movieOrderByWithRelationInput
  }

  export type showtimeWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    movieId_startsAt_theater?: showtimeMovieIdStartsAtTheaterCompoundUniqueInput
    AND?: showtimeWhereInput | showtimeWhereInput[]
    OR?: showtimeWhereInput[]
    NOT?: showtimeWhereInput | showtimeWhereInput[]
    movieId?: BigIntFilter<"showtime"> | bigint | number
    theater?: StringFilter<"showtime"> | string
    startsAt?: DateTimeFilter<"showtime"> | Date | string
    basePrice?: DecimalFilter<"showtime"> | Decimal | DecimalJsLike | number | string
    order?: OrderListRelationFilter
    seatlock?: SeatlockListRelationFilter
    movie?: XOR<MovieRelationFilter, movieWhereInput>
  }, "id" | "movieId_startsAt_theater">

  export type showtimeOrderByWithAggregationInput = {
    id?: SortOrder
    movieId?: SortOrder
    theater?: SortOrder
    startsAt?: SortOrder
    basePrice?: SortOrder
    _count?: showtimeCountOrderByAggregateInput
    _avg?: showtimeAvgOrderByAggregateInput
    _max?: showtimeMaxOrderByAggregateInput
    _min?: showtimeMinOrderByAggregateInput
    _sum?: showtimeSumOrderByAggregateInput
  }

  export type showtimeScalarWhereWithAggregatesInput = {
    AND?: showtimeScalarWhereWithAggregatesInput | showtimeScalarWhereWithAggregatesInput[]
    OR?: showtimeScalarWhereWithAggregatesInput[]
    NOT?: showtimeScalarWhereWithAggregatesInput | showtimeScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"showtime"> | bigint | number
    movieId?: BigIntWithAggregatesFilter<"showtime"> | bigint | number
    theater?: StringWithAggregatesFilter<"showtime"> | string
    startsAt?: DateTimeWithAggregatesFilter<"showtime"> | Date | string
    basePrice?: DecimalWithAggregatesFilter<"showtime"> | Decimal | DecimalJsLike | number | string
  }

  export type ticketWhereInput = {
    AND?: ticketWhereInput | ticketWhereInput[]
    OR?: ticketWhereInput[]
    NOT?: ticketWhereInput | ticketWhereInput[]
    id?: BigIntFilter<"ticket"> | bigint | number
    seatLabel?: StringFilter<"ticket"> | string
    price?: FloatFilter<"ticket"> | number
    createdAt?: DateTimeFilter<"ticket"> | Date | string
    orderId?: BigIntFilter<"ticket"> | bigint | number
    order?: XOR<OrderRelationFilter, orderWhereInput>
  }

  export type ticketOrderByWithRelationInput = {
    id?: SortOrder
    seatLabel?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
    order?: orderOrderByWithRelationInput
  }

  export type ticketWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ticketWhereInput | ticketWhereInput[]
    OR?: ticketWhereInput[]
    NOT?: ticketWhereInput | ticketWhereInput[]
    seatLabel?: StringFilter<"ticket"> | string
    price?: FloatFilter<"ticket"> | number
    createdAt?: DateTimeFilter<"ticket"> | Date | string
    orderId?: BigIntFilter<"ticket"> | bigint | number
    order?: XOR<OrderRelationFilter, orderWhereInput>
  }, "id">

  export type ticketOrderByWithAggregationInput = {
    id?: SortOrder
    seatLabel?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
    _count?: ticketCountOrderByAggregateInput
    _avg?: ticketAvgOrderByAggregateInput
    _max?: ticketMaxOrderByAggregateInput
    _min?: ticketMinOrderByAggregateInput
    _sum?: ticketSumOrderByAggregateInput
  }

  export type ticketScalarWhereWithAggregatesInput = {
    AND?: ticketScalarWhereWithAggregatesInput | ticketScalarWhereWithAggregatesInput[]
    OR?: ticketScalarWhereWithAggregatesInput[]
    NOT?: ticketScalarWhereWithAggregatesInput | ticketScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"ticket"> | bigint | number
    seatLabel?: StringWithAggregatesFilter<"ticket"> | string
    price?: FloatWithAggregatesFilter<"ticket"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ticket"> | Date | string
    orderId?: BigIntWithAggregatesFilter<"ticket"> | bigint | number
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: BigIntFilter<"user"> | bigint | number
    email?: StringFilter<"user"> | string
    passwordHash?: StringFilter<"user"> | string
    displayName?: StringNullableFilter<"user"> | string | null
    role?: EnumRoleFilter<"user"> | $Enums.Role
    createdAt?: DateTimeFilter<"user"> | Date | string
    orders?: OrderListRelationFilter
    passwordresettoken?: PasswordresettokenListRelationFilter
    promotionredemption?: PromotionredemptionListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    displayName?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    orders?: orderOrderByRelationAggregateInput
    passwordresettoken?: passwordresettokenOrderByRelationAggregateInput
    promotionredemption?: promotionredemptionOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    passwordHash?: StringFilter<"user"> | string
    displayName?: StringNullableFilter<"user"> | string | null
    role?: EnumRoleFilter<"user"> | $Enums.Role
    createdAt?: DateTimeFilter<"user"> | Date | string
    orders?: OrderListRelationFilter
    passwordresettoken?: PasswordresettokenListRelationFilter
    promotionredemption?: PromotionredemptionListRelationFilter
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    displayName?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"user"> | bigint | number
    email?: StringWithAggregatesFilter<"user"> | string
    passwordHash?: StringWithAggregatesFilter<"user"> | string
    displayName?: StringNullableWithAggregatesFilter<"user"> | string | null
    role?: EnumRoleWithAggregatesFilter<"user"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type promotionWhereInput = {
    AND?: promotionWhereInput | promotionWhereInput[]
    OR?: promotionWhereInput[]
    NOT?: promotionWhereInput | promotionWhereInput[]
    id?: BigIntFilter<"promotion"> | bigint | number
    code?: StringFilter<"promotion"> | string
    type?: StringFilter<"promotion"> | string
    value?: FloatFilter<"promotion"> | number
    maxDiscount?: FloatNullableFilter<"promotion"> | number | null
    minSpend?: FloatNullableFilter<"promotion"> | number | null
    startsAt?: DateTimeNullableFilter<"promotion"> | Date | string | null
    endsAt?: DateTimeNullableFilter<"promotion"> | Date | string | null
    usageLimit?: IntNullableFilter<"promotion"> | number | null
    usagePerUser?: IntNullableFilter<"promotion"> | number | null
    active?: BoolFilter<"promotion"> | boolean
    createdAt?: DateTimeFilter<"promotion"> | Date | string
    redemptions?: PromotionredemptionListRelationFilter
  }

  export type promotionOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    maxDiscount?: SortOrderInput | SortOrder
    minSpend?: SortOrderInput | SortOrder
    startsAt?: SortOrderInput | SortOrder
    endsAt?: SortOrderInput | SortOrder
    usageLimit?: SortOrderInput | SortOrder
    usagePerUser?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    redemptions?: promotionredemptionOrderByRelationAggregateInput
  }

  export type promotionWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    code?: string
    AND?: promotionWhereInput | promotionWhereInput[]
    OR?: promotionWhereInput[]
    NOT?: promotionWhereInput | promotionWhereInput[]
    type?: StringFilter<"promotion"> | string
    value?: FloatFilter<"promotion"> | number
    maxDiscount?: FloatNullableFilter<"promotion"> | number | null
    minSpend?: FloatNullableFilter<"promotion"> | number | null
    startsAt?: DateTimeNullableFilter<"promotion"> | Date | string | null
    endsAt?: DateTimeNullableFilter<"promotion"> | Date | string | null
    usageLimit?: IntNullableFilter<"promotion"> | number | null
    usagePerUser?: IntNullableFilter<"promotion"> | number | null
    active?: BoolFilter<"promotion"> | boolean
    createdAt?: DateTimeFilter<"promotion"> | Date | string
    redemptions?: PromotionredemptionListRelationFilter
  }, "id" | "code">

  export type promotionOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    maxDiscount?: SortOrderInput | SortOrder
    minSpend?: SortOrderInput | SortOrder
    startsAt?: SortOrderInput | SortOrder
    endsAt?: SortOrderInput | SortOrder
    usageLimit?: SortOrderInput | SortOrder
    usagePerUser?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    _count?: promotionCountOrderByAggregateInput
    _avg?: promotionAvgOrderByAggregateInput
    _max?: promotionMaxOrderByAggregateInput
    _min?: promotionMinOrderByAggregateInput
    _sum?: promotionSumOrderByAggregateInput
  }

  export type promotionScalarWhereWithAggregatesInput = {
    AND?: promotionScalarWhereWithAggregatesInput | promotionScalarWhereWithAggregatesInput[]
    OR?: promotionScalarWhereWithAggregatesInput[]
    NOT?: promotionScalarWhereWithAggregatesInput | promotionScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"promotion"> | bigint | number
    code?: StringWithAggregatesFilter<"promotion"> | string
    type?: StringWithAggregatesFilter<"promotion"> | string
    value?: FloatWithAggregatesFilter<"promotion"> | number
    maxDiscount?: FloatNullableWithAggregatesFilter<"promotion"> | number | null
    minSpend?: FloatNullableWithAggregatesFilter<"promotion"> | number | null
    startsAt?: DateTimeNullableWithAggregatesFilter<"promotion"> | Date | string | null
    endsAt?: DateTimeNullableWithAggregatesFilter<"promotion"> | Date | string | null
    usageLimit?: IntNullableWithAggregatesFilter<"promotion"> | number | null
    usagePerUser?: IntNullableWithAggregatesFilter<"promotion"> | number | null
    active?: BoolWithAggregatesFilter<"promotion"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"promotion"> | Date | string
  }

  export type promotionredemptionWhereInput = {
    AND?: promotionredemptionWhereInput | promotionredemptionWhereInput[]
    OR?: promotionredemptionWhereInput[]
    NOT?: promotionredemptionWhereInput | promotionredemptionWhereInput[]
    id?: BigIntFilter<"promotionredemption"> | bigint | number
    promotionId?: BigIntFilter<"promotionredemption"> | bigint | number
    userId?: BigIntNullableFilter<"promotionredemption"> | bigint | number | null
    orderId?: BigIntNullableFilter<"promotionredemption"> | bigint | number | null
    email?: StringNullableFilter<"promotionredemption"> | string | null
    redeemedAt?: DateTimeFilter<"promotionredemption"> | Date | string
    promotion?: XOR<PromotionRelationFilter, promotionWhereInput>
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    order?: XOR<OrderNullableRelationFilter, orderWhereInput> | null
  }

  export type promotionredemptionOrderByWithRelationInput = {
    id?: SortOrder
    promotionId?: SortOrder
    userId?: SortOrderInput | SortOrder
    orderId?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    redeemedAt?: SortOrder
    promotion?: promotionOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    order?: orderOrderByWithRelationInput
  }

  export type promotionredemptionWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: promotionredemptionWhereInput | promotionredemptionWhereInput[]
    OR?: promotionredemptionWhereInput[]
    NOT?: promotionredemptionWhereInput | promotionredemptionWhereInput[]
    promotionId?: BigIntFilter<"promotionredemption"> | bigint | number
    userId?: BigIntNullableFilter<"promotionredemption"> | bigint | number | null
    orderId?: BigIntNullableFilter<"promotionredemption"> | bigint | number | null
    email?: StringNullableFilter<"promotionredemption"> | string | null
    redeemedAt?: DateTimeFilter<"promotionredemption"> | Date | string
    promotion?: XOR<PromotionRelationFilter, promotionWhereInput>
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    order?: XOR<OrderNullableRelationFilter, orderWhereInput> | null
  }, "id">

  export type promotionredemptionOrderByWithAggregationInput = {
    id?: SortOrder
    promotionId?: SortOrder
    userId?: SortOrderInput | SortOrder
    orderId?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    redeemedAt?: SortOrder
    _count?: promotionredemptionCountOrderByAggregateInput
    _avg?: promotionredemptionAvgOrderByAggregateInput
    _max?: promotionredemptionMaxOrderByAggregateInput
    _min?: promotionredemptionMinOrderByAggregateInput
    _sum?: promotionredemptionSumOrderByAggregateInput
  }

  export type promotionredemptionScalarWhereWithAggregatesInput = {
    AND?: promotionredemptionScalarWhereWithAggregatesInput | promotionredemptionScalarWhereWithAggregatesInput[]
    OR?: promotionredemptionScalarWhereWithAggregatesInput[]
    NOT?: promotionredemptionScalarWhereWithAggregatesInput | promotionredemptionScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"promotionredemption"> | bigint | number
    promotionId?: BigIntWithAggregatesFilter<"promotionredemption"> | bigint | number
    userId?: BigIntNullableWithAggregatesFilter<"promotionredemption"> | bigint | number | null
    orderId?: BigIntNullableWithAggregatesFilter<"promotionredemption"> | bigint | number | null
    email?: StringNullableWithAggregatesFilter<"promotionredemption"> | string | null
    redeemedAt?: DateTimeWithAggregatesFilter<"promotionredemption"> | Date | string
  }

  export type movieCreateInput = {
    id?: bigint | number
    title: string
    durationMin: number
    rating?: string | null
    createdAt?: Date | string
    posterUrl?: string | null
    overview?: string | null
    active?: boolean
    showtime?: showtimeCreateNestedManyWithoutMovieInput
  }

  export type movieUncheckedCreateInput = {
    id?: bigint | number
    title: string
    durationMin: number
    rating?: string | null
    createdAt?: Date | string
    posterUrl?: string | null
    overview?: string | null
    active?: boolean
    showtime?: showtimeUncheckedCreateNestedManyWithoutMovieInput
  }

  export type movieUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    showtime?: showtimeUpdateManyWithoutMovieNestedInput
  }

  export type movieUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    showtime?: showtimeUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type movieCreateManyInput = {
    id?: bigint | number
    title: string
    durationMin: number
    rating?: string | null
    createdAt?: Date | string
    posterUrl?: string | null
    overview?: string | null
    active?: boolean
  }

  export type movieUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type movieUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type orderCreateInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    buyerEmail?: string | null
    showtime: showtimeCreateNestedOneWithoutOrderInput
    user?: userCreateNestedOneWithoutOrdersInput
    tickets?: ticketCreateNestedManyWithoutOrderInput
    promotionredemption?: promotionredemptionCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    showtimeId: bigint | number
    userId?: bigint | number | null
    buyerEmail?: string | null
    tickets?: ticketUncheckedCreateNestedManyWithoutOrderInput
    promotionredemption?: promotionredemptionUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    showtime?: showtimeUpdateOneRequiredWithoutOrderNestedInput
    user?: userUpdateOneWithoutOrdersNestedInput
    tickets?: ticketUpdateManyWithoutOrderNestedInput
    promotionredemption?: promotionredemptionUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    showtimeId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tickets?: ticketUncheckedUpdateManyWithoutOrderNestedInput
    promotionredemption?: promotionredemptionUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type orderCreateManyInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    showtimeId: bigint | number
    userId?: bigint | number | null
    buyerEmail?: string | null
  }

  export type orderUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type orderUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    showtimeId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type passwordresettokenCreateInput = {
    id?: bigint | number
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
    user: userCreateNestedOneWithoutPasswordresettokenInput
  }

  export type passwordresettokenUncheckedCreateInput = {
    id?: bigint | number
    userId: bigint | number
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type passwordresettokenUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutPasswordresettokenNestedInput
  }

  export type passwordresettokenUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type passwordresettokenCreateManyInput = {
    id?: bigint | number
    userId: bigint | number
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type passwordresettokenUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type passwordresettokenUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type seatlockCreateInput = {
    seatLabel: string
    lockedUntil: Date | string
    refCode: string
    showtime: showtimeCreateNestedOneWithoutSeatlockInput
  }

  export type seatlockUncheckedCreateInput = {
    showtimeId: bigint | number
    seatLabel: string
    lockedUntil: Date | string
    refCode: string
  }

  export type seatlockUpdateInput = {
    seatLabel?: StringFieldUpdateOperationsInput | string
    lockedUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    refCode?: StringFieldUpdateOperationsInput | string
    showtime?: showtimeUpdateOneRequiredWithoutSeatlockNestedInput
  }

  export type seatlockUncheckedUpdateInput = {
    showtimeId?: BigIntFieldUpdateOperationsInput | bigint | number
    seatLabel?: StringFieldUpdateOperationsInput | string
    lockedUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    refCode?: StringFieldUpdateOperationsInput | string
  }

  export type seatlockCreateManyInput = {
    showtimeId: bigint | number
    seatLabel: string
    lockedUntil: Date | string
    refCode: string
  }

  export type seatlockUpdateManyMutationInput = {
    seatLabel?: StringFieldUpdateOperationsInput | string
    lockedUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    refCode?: StringFieldUpdateOperationsInput | string
  }

  export type seatlockUncheckedUpdateManyInput = {
    showtimeId?: BigIntFieldUpdateOperationsInput | bigint | number
    seatLabel?: StringFieldUpdateOperationsInput | string
    lockedUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    refCode?: StringFieldUpdateOperationsInput | string
  }

  export type showtimeCreateInput = {
    id?: bigint | number
    theater: string
    startsAt: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    order?: orderCreateNestedManyWithoutShowtimeInput
    seatlock?: seatlockCreateNestedManyWithoutShowtimeInput
    movie: movieCreateNestedOneWithoutShowtimeInput
  }

  export type showtimeUncheckedCreateInput = {
    id?: bigint | number
    movieId: bigint | number
    theater: string
    startsAt: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    order?: orderUncheckedCreateNestedManyWithoutShowtimeInput
    seatlock?: seatlockUncheckedCreateNestedManyWithoutShowtimeInput
  }

  export type showtimeUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order?: orderUpdateManyWithoutShowtimeNestedInput
    seatlock?: seatlockUpdateManyWithoutShowtimeNestedInput
    movie?: movieUpdateOneRequiredWithoutShowtimeNestedInput
  }

  export type showtimeUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    movieId?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order?: orderUncheckedUpdateManyWithoutShowtimeNestedInput
    seatlock?: seatlockUncheckedUpdateManyWithoutShowtimeNestedInput
  }

  export type showtimeCreateManyInput = {
    id?: bigint | number
    movieId: bigint | number
    theater: string
    startsAt: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
  }

  export type showtimeUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type showtimeUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    movieId?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ticketCreateInput = {
    id?: bigint | number
    seatLabel: string
    price: number
    createdAt?: Date | string
    order: orderCreateNestedOneWithoutTicketsInput
  }

  export type ticketUncheckedCreateInput = {
    id?: bigint | number
    seatLabel: string
    price: number
    createdAt?: Date | string
    orderId: bigint | number
  }

  export type ticketUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    seatLabel?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: orderUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type ticketUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    seatLabel?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ticketCreateManyInput = {
    id?: bigint | number
    seatLabel: string
    price: number
    createdAt?: Date | string
    orderId: bigint | number
  }

  export type ticketUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    seatLabel?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    seatLabel?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type userCreateInput = {
    id?: bigint | number
    email: string
    passwordHash: string
    displayName?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    orders?: orderCreateNestedManyWithoutUserInput
    passwordresettoken?: passwordresettokenCreateNestedManyWithoutUserInput
    promotionredemption?: promotionredemptionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: bigint | number
    email: string
    passwordHash: string
    displayName?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    orders?: orderUncheckedCreateNestedManyWithoutUserInput
    passwordresettoken?: passwordresettokenUncheckedCreateNestedManyWithoutUserInput
    promotionredemption?: promotionredemptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: orderUpdateManyWithoutUserNestedInput
    passwordresettoken?: passwordresettokenUpdateManyWithoutUserNestedInput
    promotionredemption?: promotionredemptionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: orderUncheckedUpdateManyWithoutUserNestedInput
    passwordresettoken?: passwordresettokenUncheckedUpdateManyWithoutUserNestedInput
    promotionredemption?: promotionredemptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: bigint | number
    email: string
    passwordHash: string
    displayName?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
  }

  export type userUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionCreateInput = {
    id?: bigint | number
    code: string
    type: string
    value: number
    maxDiscount?: number | null
    minSpend?: number | null
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    usageLimit?: number | null
    usagePerUser?: number | null
    active?: boolean
    createdAt?: Date | string
    redemptions?: promotionredemptionCreateNestedManyWithoutPromotionInput
  }

  export type promotionUncheckedCreateInput = {
    id?: bigint | number
    code: string
    type: string
    value: number
    maxDiscount?: number | null
    minSpend?: number | null
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    usageLimit?: number | null
    usagePerUser?: number | null
    active?: boolean
    createdAt?: Date | string
    redemptions?: promotionredemptionUncheckedCreateNestedManyWithoutPromotionInput
  }

  export type promotionUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    maxDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    minSpend?: NullableFloatFieldUpdateOperationsInput | number | null
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usagePerUser?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    redemptions?: promotionredemptionUpdateManyWithoutPromotionNestedInput
  }

  export type promotionUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    maxDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    minSpend?: NullableFloatFieldUpdateOperationsInput | number | null
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usagePerUser?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    redemptions?: promotionredemptionUncheckedUpdateManyWithoutPromotionNestedInput
  }

  export type promotionCreateManyInput = {
    id?: bigint | number
    code: string
    type: string
    value: number
    maxDiscount?: number | null
    minSpend?: number | null
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    usageLimit?: number | null
    usagePerUser?: number | null
    active?: boolean
    createdAt?: Date | string
  }

  export type promotionUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    maxDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    minSpend?: NullableFloatFieldUpdateOperationsInput | number | null
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usagePerUser?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    maxDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    minSpend?: NullableFloatFieldUpdateOperationsInput | number | null
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usagePerUser?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionredemptionCreateInput = {
    id?: bigint | number
    email?: string | null
    redeemedAt?: Date | string
    promotion: promotionCreateNestedOneWithoutRedemptionsInput
    user?: userCreateNestedOneWithoutPromotionredemptionInput
    order?: orderCreateNestedOneWithoutPromotionredemptionInput
  }

  export type promotionredemptionUncheckedCreateInput = {
    id?: bigint | number
    promotionId: bigint | number
    userId?: bigint | number | null
    orderId?: bigint | number | null
    email?: string | null
    redeemedAt?: Date | string
  }

  export type promotionredemptionUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    promotion?: promotionUpdateOneRequiredWithoutRedemptionsNestedInput
    user?: userUpdateOneWithoutPromotionredemptionNestedInput
    order?: orderUpdateOneWithoutPromotionredemptionNestedInput
  }

  export type promotionredemptionUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    promotionId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orderId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionredemptionCreateManyInput = {
    id?: bigint | number
    promotionId: bigint | number
    userId?: bigint | number | null
    orderId?: bigint | number | null
    email?: string | null
    redeemedAt?: Date | string
  }

  export type promotionredemptionUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionredemptionUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    promotionId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orderId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ShowtimeListRelationFilter = {
    every?: showtimeWhereInput
    some?: showtimeWhereInput
    none?: showtimeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type showtimeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type movieCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    durationMin?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    posterUrl?: SortOrder
    overview?: SortOrder
    active?: SortOrder
  }

  export type movieAvgOrderByAggregateInput = {
    id?: SortOrder
    durationMin?: SortOrder
  }

  export type movieMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    durationMin?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    posterUrl?: SortOrder
    overview?: SortOrder
    active?: SortOrder
  }

  export type movieMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    durationMin?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    posterUrl?: SortOrder
    overview?: SortOrder
    active?: SortOrder
  }

  export type movieSumOrderByAggregateInput = {
    id?: SortOrder
    durationMin?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type ShowtimeRelationFilter = {
    is?: showtimeWhereInput
    isNot?: showtimeWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type TicketListRelationFilter = {
    every?: ticketWhereInput
    some?: ticketWhereInput
    none?: ticketWhereInput
  }

  export type PromotionredemptionListRelationFilter = {
    every?: promotionredemptionWhereInput
    some?: promotionredemptionWhereInput
    none?: promotionredemptionWhereInput
  }

  export type ticketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type promotionredemptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type orderCountOrderByAggregateInput = {
    id?: SortOrder
    refCode?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    discountAmt?: SortOrder
    promoCode?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    showtimeId?: SortOrder
    userId?: SortOrder
    buyerEmail?: SortOrder
  }

  export type orderAvgOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    discountAmt?: SortOrder
    showtimeId?: SortOrder
    userId?: SortOrder
  }

  export type orderMaxOrderByAggregateInput = {
    id?: SortOrder
    refCode?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    discountAmt?: SortOrder
    promoCode?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    showtimeId?: SortOrder
    userId?: SortOrder
    buyerEmail?: SortOrder
  }

  export type orderMinOrderByAggregateInput = {
    id?: SortOrder
    refCode?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    discountAmt?: SortOrder
    promoCode?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    showtimeId?: SortOrder
    userId?: SortOrder
    buyerEmail?: SortOrder
  }

  export type orderSumOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    discountAmt?: SortOrder
    showtimeId?: SortOrder
    userId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type passwordresettokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type passwordresettokenAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type passwordresettokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type passwordresettokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type passwordresettokenSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type seatlockShowtimeIdSeatLabelCompoundUniqueInput = {
    showtimeId: bigint | number
    seatLabel: string
  }

  export type seatlockCountOrderByAggregateInput = {
    showtimeId?: SortOrder
    seatLabel?: SortOrder
    lockedUntil?: SortOrder
    refCode?: SortOrder
  }

  export type seatlockAvgOrderByAggregateInput = {
    showtimeId?: SortOrder
  }

  export type seatlockMaxOrderByAggregateInput = {
    showtimeId?: SortOrder
    seatLabel?: SortOrder
    lockedUntil?: SortOrder
    refCode?: SortOrder
  }

  export type seatlockMinOrderByAggregateInput = {
    showtimeId?: SortOrder
    seatLabel?: SortOrder
    lockedUntil?: SortOrder
    refCode?: SortOrder
  }

  export type seatlockSumOrderByAggregateInput = {
    showtimeId?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type OrderListRelationFilter = {
    every?: orderWhereInput
    some?: orderWhereInput
    none?: orderWhereInput
  }

  export type SeatlockListRelationFilter = {
    every?: seatlockWhereInput
    some?: seatlockWhereInput
    none?: seatlockWhereInput
  }

  export type MovieRelationFilter = {
    is?: movieWhereInput
    isNot?: movieWhereInput
  }

  export type orderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type seatlockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type showtimeMovieIdStartsAtTheaterCompoundUniqueInput = {
    movieId: bigint | number
    startsAt: Date | string
    theater: string
  }

  export type showtimeCountOrderByAggregateInput = {
    id?: SortOrder
    movieId?: SortOrder
    theater?: SortOrder
    startsAt?: SortOrder
    basePrice?: SortOrder
  }

  export type showtimeAvgOrderByAggregateInput = {
    id?: SortOrder
    movieId?: SortOrder
    basePrice?: SortOrder
  }

  export type showtimeMaxOrderByAggregateInput = {
    id?: SortOrder
    movieId?: SortOrder
    theater?: SortOrder
    startsAt?: SortOrder
    basePrice?: SortOrder
  }

  export type showtimeMinOrderByAggregateInput = {
    id?: SortOrder
    movieId?: SortOrder
    theater?: SortOrder
    startsAt?: SortOrder
    basePrice?: SortOrder
  }

  export type showtimeSumOrderByAggregateInput = {
    id?: SortOrder
    movieId?: SortOrder
    basePrice?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type OrderRelationFilter = {
    is?: orderWhereInput
    isNot?: orderWhereInput
  }

  export type ticketCountOrderByAggregateInput = {
    id?: SortOrder
    seatLabel?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
  }

  export type ticketAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    orderId?: SortOrder
  }

  export type ticketMaxOrderByAggregateInput = {
    id?: SortOrder
    seatLabel?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
  }

  export type ticketMinOrderByAggregateInput = {
    id?: SortOrder
    seatLabel?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
  }

  export type ticketSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    orderId?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type PasswordresettokenListRelationFilter = {
    every?: passwordresettokenWhereInput
    some?: passwordresettokenWhereInput
    none?: passwordresettokenWhereInput
  }

  export type passwordresettokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    displayName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    displayName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    displayName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type promotionCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    maxDiscount?: SortOrder
    minSpend?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    usageLimit?: SortOrder
    usagePerUser?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
  }

  export type promotionAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    maxDiscount?: SortOrder
    minSpend?: SortOrder
    usageLimit?: SortOrder
    usagePerUser?: SortOrder
  }

  export type promotionMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    maxDiscount?: SortOrder
    minSpend?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    usageLimit?: SortOrder
    usagePerUser?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
  }

  export type promotionMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    maxDiscount?: SortOrder
    minSpend?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    usageLimit?: SortOrder
    usagePerUser?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
  }

  export type promotionSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    maxDiscount?: SortOrder
    minSpend?: SortOrder
    usageLimit?: SortOrder
    usagePerUser?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type PromotionRelationFilter = {
    is?: promotionWhereInput
    isNot?: promotionWhereInput
  }

  export type OrderNullableRelationFilter = {
    is?: orderWhereInput | null
    isNot?: orderWhereInput | null
  }

  export type promotionredemptionCountOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    email?: SortOrder
    redeemedAt?: SortOrder
  }

  export type promotionredemptionAvgOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
  }

  export type promotionredemptionMaxOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    email?: SortOrder
    redeemedAt?: SortOrder
  }

  export type promotionredemptionMinOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    email?: SortOrder
    redeemedAt?: SortOrder
  }

  export type promotionredemptionSumOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
  }

  export type showtimeCreateNestedManyWithoutMovieInput = {
    create?: XOR<showtimeCreateWithoutMovieInput, showtimeUncheckedCreateWithoutMovieInput> | showtimeCreateWithoutMovieInput[] | showtimeUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: showtimeCreateOrConnectWithoutMovieInput | showtimeCreateOrConnectWithoutMovieInput[]
    createMany?: showtimeCreateManyMovieInputEnvelope
    connect?: showtimeWhereUniqueInput | showtimeWhereUniqueInput[]
  }

  export type showtimeUncheckedCreateNestedManyWithoutMovieInput = {
    create?: XOR<showtimeCreateWithoutMovieInput, showtimeUncheckedCreateWithoutMovieInput> | showtimeCreateWithoutMovieInput[] | showtimeUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: showtimeCreateOrConnectWithoutMovieInput | showtimeCreateOrConnectWithoutMovieInput[]
    createMany?: showtimeCreateManyMovieInputEnvelope
    connect?: showtimeWhereUniqueInput | showtimeWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type showtimeUpdateManyWithoutMovieNestedInput = {
    create?: XOR<showtimeCreateWithoutMovieInput, showtimeUncheckedCreateWithoutMovieInput> | showtimeCreateWithoutMovieInput[] | showtimeUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: showtimeCreateOrConnectWithoutMovieInput | showtimeCreateOrConnectWithoutMovieInput[]
    upsert?: showtimeUpsertWithWhereUniqueWithoutMovieInput | showtimeUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: showtimeCreateManyMovieInputEnvelope
    set?: showtimeWhereUniqueInput | showtimeWhereUniqueInput[]
    disconnect?: showtimeWhereUniqueInput | showtimeWhereUniqueInput[]
    delete?: showtimeWhereUniqueInput | showtimeWhereUniqueInput[]
    connect?: showtimeWhereUniqueInput | showtimeWhereUniqueInput[]
    update?: showtimeUpdateWithWhereUniqueWithoutMovieInput | showtimeUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: showtimeUpdateManyWithWhereWithoutMovieInput | showtimeUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: showtimeScalarWhereInput | showtimeScalarWhereInput[]
  }

  export type showtimeUncheckedUpdateManyWithoutMovieNestedInput = {
    create?: XOR<showtimeCreateWithoutMovieInput, showtimeUncheckedCreateWithoutMovieInput> | showtimeCreateWithoutMovieInput[] | showtimeUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: showtimeCreateOrConnectWithoutMovieInput | showtimeCreateOrConnectWithoutMovieInput[]
    upsert?: showtimeUpsertWithWhereUniqueWithoutMovieInput | showtimeUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: showtimeCreateManyMovieInputEnvelope
    set?: showtimeWhereUniqueInput | showtimeWhereUniqueInput[]
    disconnect?: showtimeWhereUniqueInput | showtimeWhereUniqueInput[]
    delete?: showtimeWhereUniqueInput | showtimeWhereUniqueInput[]
    connect?: showtimeWhereUniqueInput | showtimeWhereUniqueInput[]
    update?: showtimeUpdateWithWhereUniqueWithoutMovieInput | showtimeUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: showtimeUpdateManyWithWhereWithoutMovieInput | showtimeUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: showtimeScalarWhereInput | showtimeScalarWhereInput[]
  }

  export type showtimeCreateNestedOneWithoutOrderInput = {
    create?: XOR<showtimeCreateWithoutOrderInput, showtimeUncheckedCreateWithoutOrderInput>
    connectOrCreate?: showtimeCreateOrConnectWithoutOrderInput
    connect?: showtimeWhereUniqueInput
  }

  export type userCreateNestedOneWithoutOrdersInput = {
    create?: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: userCreateOrConnectWithoutOrdersInput
    connect?: userWhereUniqueInput
  }

  export type ticketCreateNestedManyWithoutOrderInput = {
    create?: XOR<ticketCreateWithoutOrderInput, ticketUncheckedCreateWithoutOrderInput> | ticketCreateWithoutOrderInput[] | ticketUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutOrderInput | ticketCreateOrConnectWithoutOrderInput[]
    createMany?: ticketCreateManyOrderInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type promotionredemptionCreateNestedManyWithoutOrderInput = {
    create?: XOR<promotionredemptionCreateWithoutOrderInput, promotionredemptionUncheckedCreateWithoutOrderInput> | promotionredemptionCreateWithoutOrderInput[] | promotionredemptionUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutOrderInput | promotionredemptionCreateOrConnectWithoutOrderInput[]
    createMany?: promotionredemptionCreateManyOrderInputEnvelope
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
  }

  export type ticketUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<ticketCreateWithoutOrderInput, ticketUncheckedCreateWithoutOrderInput> | ticketCreateWithoutOrderInput[] | ticketUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutOrderInput | ticketCreateOrConnectWithoutOrderInput[]
    createMany?: ticketCreateManyOrderInputEnvelope
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
  }

  export type promotionredemptionUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<promotionredemptionCreateWithoutOrderInput, promotionredemptionUncheckedCreateWithoutOrderInput> | promotionredemptionCreateWithoutOrderInput[] | promotionredemptionUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutOrderInput | promotionredemptionCreateOrConnectWithoutOrderInput[]
    createMany?: promotionredemptionCreateManyOrderInputEnvelope
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type showtimeUpdateOneRequiredWithoutOrderNestedInput = {
    create?: XOR<showtimeCreateWithoutOrderInput, showtimeUncheckedCreateWithoutOrderInput>
    connectOrCreate?: showtimeCreateOrConnectWithoutOrderInput
    upsert?: showtimeUpsertWithoutOrderInput
    connect?: showtimeWhereUniqueInput
    update?: XOR<XOR<showtimeUpdateToOneWithWhereWithoutOrderInput, showtimeUpdateWithoutOrderInput>, showtimeUncheckedUpdateWithoutOrderInput>
  }

  export type userUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: userCreateOrConnectWithoutOrdersInput
    upsert?: userUpsertWithoutOrdersInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutOrdersInput, userUpdateWithoutOrdersInput>, userUncheckedUpdateWithoutOrdersInput>
  }

  export type ticketUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ticketCreateWithoutOrderInput, ticketUncheckedCreateWithoutOrderInput> | ticketCreateWithoutOrderInput[] | ticketUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutOrderInput | ticketCreateOrConnectWithoutOrderInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutOrderInput | ticketUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ticketCreateManyOrderInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutOrderInput | ticketUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutOrderInput | ticketUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type promotionredemptionUpdateManyWithoutOrderNestedInput = {
    create?: XOR<promotionredemptionCreateWithoutOrderInput, promotionredemptionUncheckedCreateWithoutOrderInput> | promotionredemptionCreateWithoutOrderInput[] | promotionredemptionUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutOrderInput | promotionredemptionCreateOrConnectWithoutOrderInput[]
    upsert?: promotionredemptionUpsertWithWhereUniqueWithoutOrderInput | promotionredemptionUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: promotionredemptionCreateManyOrderInputEnvelope
    set?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    disconnect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    delete?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    update?: promotionredemptionUpdateWithWhereUniqueWithoutOrderInput | promotionredemptionUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: promotionredemptionUpdateManyWithWhereWithoutOrderInput | promotionredemptionUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: promotionredemptionScalarWhereInput | promotionredemptionScalarWhereInput[]
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type ticketUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ticketCreateWithoutOrderInput, ticketUncheckedCreateWithoutOrderInput> | ticketCreateWithoutOrderInput[] | ticketUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ticketCreateOrConnectWithoutOrderInput | ticketCreateOrConnectWithoutOrderInput[]
    upsert?: ticketUpsertWithWhereUniqueWithoutOrderInput | ticketUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ticketCreateManyOrderInputEnvelope
    set?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    disconnect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    delete?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    connect?: ticketWhereUniqueInput | ticketWhereUniqueInput[]
    update?: ticketUpdateWithWhereUniqueWithoutOrderInput | ticketUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ticketUpdateManyWithWhereWithoutOrderInput | ticketUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ticketScalarWhereInput | ticketScalarWhereInput[]
  }

  export type promotionredemptionUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<promotionredemptionCreateWithoutOrderInput, promotionredemptionUncheckedCreateWithoutOrderInput> | promotionredemptionCreateWithoutOrderInput[] | promotionredemptionUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutOrderInput | promotionredemptionCreateOrConnectWithoutOrderInput[]
    upsert?: promotionredemptionUpsertWithWhereUniqueWithoutOrderInput | promotionredemptionUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: promotionredemptionCreateManyOrderInputEnvelope
    set?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    disconnect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    delete?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    update?: promotionredemptionUpdateWithWhereUniqueWithoutOrderInput | promotionredemptionUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: promotionredemptionUpdateManyWithWhereWithoutOrderInput | promotionredemptionUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: promotionredemptionScalarWhereInput | promotionredemptionScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutPasswordresettokenInput = {
    create?: XOR<userCreateWithoutPasswordresettokenInput, userUncheckedCreateWithoutPasswordresettokenInput>
    connectOrCreate?: userCreateOrConnectWithoutPasswordresettokenInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutPasswordresettokenNestedInput = {
    create?: XOR<userCreateWithoutPasswordresettokenInput, userUncheckedCreateWithoutPasswordresettokenInput>
    connectOrCreate?: userCreateOrConnectWithoutPasswordresettokenInput
    upsert?: userUpsertWithoutPasswordresettokenInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutPasswordresettokenInput, userUpdateWithoutPasswordresettokenInput>, userUncheckedUpdateWithoutPasswordresettokenInput>
  }

  export type showtimeCreateNestedOneWithoutSeatlockInput = {
    create?: XOR<showtimeCreateWithoutSeatlockInput, showtimeUncheckedCreateWithoutSeatlockInput>
    connectOrCreate?: showtimeCreateOrConnectWithoutSeatlockInput
    connect?: showtimeWhereUniqueInput
  }

  export type showtimeUpdateOneRequiredWithoutSeatlockNestedInput = {
    create?: XOR<showtimeCreateWithoutSeatlockInput, showtimeUncheckedCreateWithoutSeatlockInput>
    connectOrCreate?: showtimeCreateOrConnectWithoutSeatlockInput
    upsert?: showtimeUpsertWithoutSeatlockInput
    connect?: showtimeWhereUniqueInput
    update?: XOR<XOR<showtimeUpdateToOneWithWhereWithoutSeatlockInput, showtimeUpdateWithoutSeatlockInput>, showtimeUncheckedUpdateWithoutSeatlockInput>
  }

  export type orderCreateNestedManyWithoutShowtimeInput = {
    create?: XOR<orderCreateWithoutShowtimeInput, orderUncheckedCreateWithoutShowtimeInput> | orderCreateWithoutShowtimeInput[] | orderUncheckedCreateWithoutShowtimeInput[]
    connectOrCreate?: orderCreateOrConnectWithoutShowtimeInput | orderCreateOrConnectWithoutShowtimeInput[]
    createMany?: orderCreateManyShowtimeInputEnvelope
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
  }

  export type seatlockCreateNestedManyWithoutShowtimeInput = {
    create?: XOR<seatlockCreateWithoutShowtimeInput, seatlockUncheckedCreateWithoutShowtimeInput> | seatlockCreateWithoutShowtimeInput[] | seatlockUncheckedCreateWithoutShowtimeInput[]
    connectOrCreate?: seatlockCreateOrConnectWithoutShowtimeInput | seatlockCreateOrConnectWithoutShowtimeInput[]
    createMany?: seatlockCreateManyShowtimeInputEnvelope
    connect?: seatlockWhereUniqueInput | seatlockWhereUniqueInput[]
  }

  export type movieCreateNestedOneWithoutShowtimeInput = {
    create?: XOR<movieCreateWithoutShowtimeInput, movieUncheckedCreateWithoutShowtimeInput>
    connectOrCreate?: movieCreateOrConnectWithoutShowtimeInput
    connect?: movieWhereUniqueInput
  }

  export type orderUncheckedCreateNestedManyWithoutShowtimeInput = {
    create?: XOR<orderCreateWithoutShowtimeInput, orderUncheckedCreateWithoutShowtimeInput> | orderCreateWithoutShowtimeInput[] | orderUncheckedCreateWithoutShowtimeInput[]
    connectOrCreate?: orderCreateOrConnectWithoutShowtimeInput | orderCreateOrConnectWithoutShowtimeInput[]
    createMany?: orderCreateManyShowtimeInputEnvelope
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
  }

  export type seatlockUncheckedCreateNestedManyWithoutShowtimeInput = {
    create?: XOR<seatlockCreateWithoutShowtimeInput, seatlockUncheckedCreateWithoutShowtimeInput> | seatlockCreateWithoutShowtimeInput[] | seatlockUncheckedCreateWithoutShowtimeInput[]
    connectOrCreate?: seatlockCreateOrConnectWithoutShowtimeInput | seatlockCreateOrConnectWithoutShowtimeInput[]
    createMany?: seatlockCreateManyShowtimeInputEnvelope
    connect?: seatlockWhereUniqueInput | seatlockWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type orderUpdateManyWithoutShowtimeNestedInput = {
    create?: XOR<orderCreateWithoutShowtimeInput, orderUncheckedCreateWithoutShowtimeInput> | orderCreateWithoutShowtimeInput[] | orderUncheckedCreateWithoutShowtimeInput[]
    connectOrCreate?: orderCreateOrConnectWithoutShowtimeInput | orderCreateOrConnectWithoutShowtimeInput[]
    upsert?: orderUpsertWithWhereUniqueWithoutShowtimeInput | orderUpsertWithWhereUniqueWithoutShowtimeInput[]
    createMany?: orderCreateManyShowtimeInputEnvelope
    set?: orderWhereUniqueInput | orderWhereUniqueInput[]
    disconnect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    delete?: orderWhereUniqueInput | orderWhereUniqueInput[]
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    update?: orderUpdateWithWhereUniqueWithoutShowtimeInput | orderUpdateWithWhereUniqueWithoutShowtimeInput[]
    updateMany?: orderUpdateManyWithWhereWithoutShowtimeInput | orderUpdateManyWithWhereWithoutShowtimeInput[]
    deleteMany?: orderScalarWhereInput | orderScalarWhereInput[]
  }

  export type seatlockUpdateManyWithoutShowtimeNestedInput = {
    create?: XOR<seatlockCreateWithoutShowtimeInput, seatlockUncheckedCreateWithoutShowtimeInput> | seatlockCreateWithoutShowtimeInput[] | seatlockUncheckedCreateWithoutShowtimeInput[]
    connectOrCreate?: seatlockCreateOrConnectWithoutShowtimeInput | seatlockCreateOrConnectWithoutShowtimeInput[]
    upsert?: seatlockUpsertWithWhereUniqueWithoutShowtimeInput | seatlockUpsertWithWhereUniqueWithoutShowtimeInput[]
    createMany?: seatlockCreateManyShowtimeInputEnvelope
    set?: seatlockWhereUniqueInput | seatlockWhereUniqueInput[]
    disconnect?: seatlockWhereUniqueInput | seatlockWhereUniqueInput[]
    delete?: seatlockWhereUniqueInput | seatlockWhereUniqueInput[]
    connect?: seatlockWhereUniqueInput | seatlockWhereUniqueInput[]
    update?: seatlockUpdateWithWhereUniqueWithoutShowtimeInput | seatlockUpdateWithWhereUniqueWithoutShowtimeInput[]
    updateMany?: seatlockUpdateManyWithWhereWithoutShowtimeInput | seatlockUpdateManyWithWhereWithoutShowtimeInput[]
    deleteMany?: seatlockScalarWhereInput | seatlockScalarWhereInput[]
  }

  export type movieUpdateOneRequiredWithoutShowtimeNestedInput = {
    create?: XOR<movieCreateWithoutShowtimeInput, movieUncheckedCreateWithoutShowtimeInput>
    connectOrCreate?: movieCreateOrConnectWithoutShowtimeInput
    upsert?: movieUpsertWithoutShowtimeInput
    connect?: movieWhereUniqueInput
    update?: XOR<XOR<movieUpdateToOneWithWhereWithoutShowtimeInput, movieUpdateWithoutShowtimeInput>, movieUncheckedUpdateWithoutShowtimeInput>
  }

  export type orderUncheckedUpdateManyWithoutShowtimeNestedInput = {
    create?: XOR<orderCreateWithoutShowtimeInput, orderUncheckedCreateWithoutShowtimeInput> | orderCreateWithoutShowtimeInput[] | orderUncheckedCreateWithoutShowtimeInput[]
    connectOrCreate?: orderCreateOrConnectWithoutShowtimeInput | orderCreateOrConnectWithoutShowtimeInput[]
    upsert?: orderUpsertWithWhereUniqueWithoutShowtimeInput | orderUpsertWithWhereUniqueWithoutShowtimeInput[]
    createMany?: orderCreateManyShowtimeInputEnvelope
    set?: orderWhereUniqueInput | orderWhereUniqueInput[]
    disconnect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    delete?: orderWhereUniqueInput | orderWhereUniqueInput[]
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    update?: orderUpdateWithWhereUniqueWithoutShowtimeInput | orderUpdateWithWhereUniqueWithoutShowtimeInput[]
    updateMany?: orderUpdateManyWithWhereWithoutShowtimeInput | orderUpdateManyWithWhereWithoutShowtimeInput[]
    deleteMany?: orderScalarWhereInput | orderScalarWhereInput[]
  }

  export type seatlockUncheckedUpdateManyWithoutShowtimeNestedInput = {
    create?: XOR<seatlockCreateWithoutShowtimeInput, seatlockUncheckedCreateWithoutShowtimeInput> | seatlockCreateWithoutShowtimeInput[] | seatlockUncheckedCreateWithoutShowtimeInput[]
    connectOrCreate?: seatlockCreateOrConnectWithoutShowtimeInput | seatlockCreateOrConnectWithoutShowtimeInput[]
    upsert?: seatlockUpsertWithWhereUniqueWithoutShowtimeInput | seatlockUpsertWithWhereUniqueWithoutShowtimeInput[]
    createMany?: seatlockCreateManyShowtimeInputEnvelope
    set?: seatlockWhereUniqueInput | seatlockWhereUniqueInput[]
    disconnect?: seatlockWhereUniqueInput | seatlockWhereUniqueInput[]
    delete?: seatlockWhereUniqueInput | seatlockWhereUniqueInput[]
    connect?: seatlockWhereUniqueInput | seatlockWhereUniqueInput[]
    update?: seatlockUpdateWithWhereUniqueWithoutShowtimeInput | seatlockUpdateWithWhereUniqueWithoutShowtimeInput[]
    updateMany?: seatlockUpdateManyWithWhereWithoutShowtimeInput | seatlockUpdateManyWithWhereWithoutShowtimeInput[]
    deleteMany?: seatlockScalarWhereInput | seatlockScalarWhereInput[]
  }

  export type orderCreateNestedOneWithoutTicketsInput = {
    create?: XOR<orderCreateWithoutTicketsInput, orderUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: orderCreateOrConnectWithoutTicketsInput
    connect?: orderWhereUniqueInput
  }

  export type orderUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<orderCreateWithoutTicketsInput, orderUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: orderCreateOrConnectWithoutTicketsInput
    upsert?: orderUpsertWithoutTicketsInput
    connect?: orderWhereUniqueInput
    update?: XOR<XOR<orderUpdateToOneWithWhereWithoutTicketsInput, orderUpdateWithoutTicketsInput>, orderUncheckedUpdateWithoutTicketsInput>
  }

  export type orderCreateNestedManyWithoutUserInput = {
    create?: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput> | orderCreateWithoutUserInput[] | orderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: orderCreateOrConnectWithoutUserInput | orderCreateOrConnectWithoutUserInput[]
    createMany?: orderCreateManyUserInputEnvelope
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
  }

  export type passwordresettokenCreateNestedManyWithoutUserInput = {
    create?: XOR<passwordresettokenCreateWithoutUserInput, passwordresettokenUncheckedCreateWithoutUserInput> | passwordresettokenCreateWithoutUserInput[] | passwordresettokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: passwordresettokenCreateOrConnectWithoutUserInput | passwordresettokenCreateOrConnectWithoutUserInput[]
    createMany?: passwordresettokenCreateManyUserInputEnvelope
    connect?: passwordresettokenWhereUniqueInput | passwordresettokenWhereUniqueInput[]
  }

  export type promotionredemptionCreateNestedManyWithoutUserInput = {
    create?: XOR<promotionredemptionCreateWithoutUserInput, promotionredemptionUncheckedCreateWithoutUserInput> | promotionredemptionCreateWithoutUserInput[] | promotionredemptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutUserInput | promotionredemptionCreateOrConnectWithoutUserInput[]
    createMany?: promotionredemptionCreateManyUserInputEnvelope
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
  }

  export type orderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput> | orderCreateWithoutUserInput[] | orderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: orderCreateOrConnectWithoutUserInput | orderCreateOrConnectWithoutUserInput[]
    createMany?: orderCreateManyUserInputEnvelope
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
  }

  export type passwordresettokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<passwordresettokenCreateWithoutUserInput, passwordresettokenUncheckedCreateWithoutUserInput> | passwordresettokenCreateWithoutUserInput[] | passwordresettokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: passwordresettokenCreateOrConnectWithoutUserInput | passwordresettokenCreateOrConnectWithoutUserInput[]
    createMany?: passwordresettokenCreateManyUserInputEnvelope
    connect?: passwordresettokenWhereUniqueInput | passwordresettokenWhereUniqueInput[]
  }

  export type promotionredemptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<promotionredemptionCreateWithoutUserInput, promotionredemptionUncheckedCreateWithoutUserInput> | promotionredemptionCreateWithoutUserInput[] | promotionredemptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutUserInput | promotionredemptionCreateOrConnectWithoutUserInput[]
    createMany?: promotionredemptionCreateManyUserInputEnvelope
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type orderUpdateManyWithoutUserNestedInput = {
    create?: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput> | orderCreateWithoutUserInput[] | orderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: orderCreateOrConnectWithoutUserInput | orderCreateOrConnectWithoutUserInput[]
    upsert?: orderUpsertWithWhereUniqueWithoutUserInput | orderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: orderCreateManyUserInputEnvelope
    set?: orderWhereUniqueInput | orderWhereUniqueInput[]
    disconnect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    delete?: orderWhereUniqueInput | orderWhereUniqueInput[]
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    update?: orderUpdateWithWhereUniqueWithoutUserInput | orderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: orderUpdateManyWithWhereWithoutUserInput | orderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: orderScalarWhereInput | orderScalarWhereInput[]
  }

  export type passwordresettokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<passwordresettokenCreateWithoutUserInput, passwordresettokenUncheckedCreateWithoutUserInput> | passwordresettokenCreateWithoutUserInput[] | passwordresettokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: passwordresettokenCreateOrConnectWithoutUserInput | passwordresettokenCreateOrConnectWithoutUserInput[]
    upsert?: passwordresettokenUpsertWithWhereUniqueWithoutUserInput | passwordresettokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: passwordresettokenCreateManyUserInputEnvelope
    set?: passwordresettokenWhereUniqueInput | passwordresettokenWhereUniqueInput[]
    disconnect?: passwordresettokenWhereUniqueInput | passwordresettokenWhereUniqueInput[]
    delete?: passwordresettokenWhereUniqueInput | passwordresettokenWhereUniqueInput[]
    connect?: passwordresettokenWhereUniqueInput | passwordresettokenWhereUniqueInput[]
    update?: passwordresettokenUpdateWithWhereUniqueWithoutUserInput | passwordresettokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: passwordresettokenUpdateManyWithWhereWithoutUserInput | passwordresettokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: passwordresettokenScalarWhereInput | passwordresettokenScalarWhereInput[]
  }

  export type promotionredemptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<promotionredemptionCreateWithoutUserInput, promotionredemptionUncheckedCreateWithoutUserInput> | promotionredemptionCreateWithoutUserInput[] | promotionredemptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutUserInput | promotionredemptionCreateOrConnectWithoutUserInput[]
    upsert?: promotionredemptionUpsertWithWhereUniqueWithoutUserInput | promotionredemptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: promotionredemptionCreateManyUserInputEnvelope
    set?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    disconnect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    delete?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    update?: promotionredemptionUpdateWithWhereUniqueWithoutUserInput | promotionredemptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: promotionredemptionUpdateManyWithWhereWithoutUserInput | promotionredemptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: promotionredemptionScalarWhereInput | promotionredemptionScalarWhereInput[]
  }

  export type orderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput> | orderCreateWithoutUserInput[] | orderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: orderCreateOrConnectWithoutUserInput | orderCreateOrConnectWithoutUserInput[]
    upsert?: orderUpsertWithWhereUniqueWithoutUserInput | orderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: orderCreateManyUserInputEnvelope
    set?: orderWhereUniqueInput | orderWhereUniqueInput[]
    disconnect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    delete?: orderWhereUniqueInput | orderWhereUniqueInput[]
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    update?: orderUpdateWithWhereUniqueWithoutUserInput | orderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: orderUpdateManyWithWhereWithoutUserInput | orderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: orderScalarWhereInput | orderScalarWhereInput[]
  }

  export type passwordresettokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<passwordresettokenCreateWithoutUserInput, passwordresettokenUncheckedCreateWithoutUserInput> | passwordresettokenCreateWithoutUserInput[] | passwordresettokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: passwordresettokenCreateOrConnectWithoutUserInput | passwordresettokenCreateOrConnectWithoutUserInput[]
    upsert?: passwordresettokenUpsertWithWhereUniqueWithoutUserInput | passwordresettokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: passwordresettokenCreateManyUserInputEnvelope
    set?: passwordresettokenWhereUniqueInput | passwordresettokenWhereUniqueInput[]
    disconnect?: passwordresettokenWhereUniqueInput | passwordresettokenWhereUniqueInput[]
    delete?: passwordresettokenWhereUniqueInput | passwordresettokenWhereUniqueInput[]
    connect?: passwordresettokenWhereUniqueInput | passwordresettokenWhereUniqueInput[]
    update?: passwordresettokenUpdateWithWhereUniqueWithoutUserInput | passwordresettokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: passwordresettokenUpdateManyWithWhereWithoutUserInput | passwordresettokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: passwordresettokenScalarWhereInput | passwordresettokenScalarWhereInput[]
  }

  export type promotionredemptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<promotionredemptionCreateWithoutUserInput, promotionredemptionUncheckedCreateWithoutUserInput> | promotionredemptionCreateWithoutUserInput[] | promotionredemptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutUserInput | promotionredemptionCreateOrConnectWithoutUserInput[]
    upsert?: promotionredemptionUpsertWithWhereUniqueWithoutUserInput | promotionredemptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: promotionredemptionCreateManyUserInputEnvelope
    set?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    disconnect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    delete?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    update?: promotionredemptionUpdateWithWhereUniqueWithoutUserInput | promotionredemptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: promotionredemptionUpdateManyWithWhereWithoutUserInput | promotionredemptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: promotionredemptionScalarWhereInput | promotionredemptionScalarWhereInput[]
  }

  export type promotionredemptionCreateNestedManyWithoutPromotionInput = {
    create?: XOR<promotionredemptionCreateWithoutPromotionInput, promotionredemptionUncheckedCreateWithoutPromotionInput> | promotionredemptionCreateWithoutPromotionInput[] | promotionredemptionUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutPromotionInput | promotionredemptionCreateOrConnectWithoutPromotionInput[]
    createMany?: promotionredemptionCreateManyPromotionInputEnvelope
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
  }

  export type promotionredemptionUncheckedCreateNestedManyWithoutPromotionInput = {
    create?: XOR<promotionredemptionCreateWithoutPromotionInput, promotionredemptionUncheckedCreateWithoutPromotionInput> | promotionredemptionCreateWithoutPromotionInput[] | promotionredemptionUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutPromotionInput | promotionredemptionCreateOrConnectWithoutPromotionInput[]
    createMany?: promotionredemptionCreateManyPromotionInputEnvelope
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type promotionredemptionUpdateManyWithoutPromotionNestedInput = {
    create?: XOR<promotionredemptionCreateWithoutPromotionInput, promotionredemptionUncheckedCreateWithoutPromotionInput> | promotionredemptionCreateWithoutPromotionInput[] | promotionredemptionUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutPromotionInput | promotionredemptionCreateOrConnectWithoutPromotionInput[]
    upsert?: promotionredemptionUpsertWithWhereUniqueWithoutPromotionInput | promotionredemptionUpsertWithWhereUniqueWithoutPromotionInput[]
    createMany?: promotionredemptionCreateManyPromotionInputEnvelope
    set?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    disconnect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    delete?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    update?: promotionredemptionUpdateWithWhereUniqueWithoutPromotionInput | promotionredemptionUpdateWithWhereUniqueWithoutPromotionInput[]
    updateMany?: promotionredemptionUpdateManyWithWhereWithoutPromotionInput | promotionredemptionUpdateManyWithWhereWithoutPromotionInput[]
    deleteMany?: promotionredemptionScalarWhereInput | promotionredemptionScalarWhereInput[]
  }

  export type promotionredemptionUncheckedUpdateManyWithoutPromotionNestedInput = {
    create?: XOR<promotionredemptionCreateWithoutPromotionInput, promotionredemptionUncheckedCreateWithoutPromotionInput> | promotionredemptionCreateWithoutPromotionInput[] | promotionredemptionUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: promotionredemptionCreateOrConnectWithoutPromotionInput | promotionredemptionCreateOrConnectWithoutPromotionInput[]
    upsert?: promotionredemptionUpsertWithWhereUniqueWithoutPromotionInput | promotionredemptionUpsertWithWhereUniqueWithoutPromotionInput[]
    createMany?: promotionredemptionCreateManyPromotionInputEnvelope
    set?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    disconnect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    delete?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    connect?: promotionredemptionWhereUniqueInput | promotionredemptionWhereUniqueInput[]
    update?: promotionredemptionUpdateWithWhereUniqueWithoutPromotionInput | promotionredemptionUpdateWithWhereUniqueWithoutPromotionInput[]
    updateMany?: promotionredemptionUpdateManyWithWhereWithoutPromotionInput | promotionredemptionUpdateManyWithWhereWithoutPromotionInput[]
    deleteMany?: promotionredemptionScalarWhereInput | promotionredemptionScalarWhereInput[]
  }

  export type promotionCreateNestedOneWithoutRedemptionsInput = {
    create?: XOR<promotionCreateWithoutRedemptionsInput, promotionUncheckedCreateWithoutRedemptionsInput>
    connectOrCreate?: promotionCreateOrConnectWithoutRedemptionsInput
    connect?: promotionWhereUniqueInput
  }

  export type userCreateNestedOneWithoutPromotionredemptionInput = {
    create?: XOR<userCreateWithoutPromotionredemptionInput, userUncheckedCreateWithoutPromotionredemptionInput>
    connectOrCreate?: userCreateOrConnectWithoutPromotionredemptionInput
    connect?: userWhereUniqueInput
  }

  export type orderCreateNestedOneWithoutPromotionredemptionInput = {
    create?: XOR<orderCreateWithoutPromotionredemptionInput, orderUncheckedCreateWithoutPromotionredemptionInput>
    connectOrCreate?: orderCreateOrConnectWithoutPromotionredemptionInput
    connect?: orderWhereUniqueInput
  }

  export type promotionUpdateOneRequiredWithoutRedemptionsNestedInput = {
    create?: XOR<promotionCreateWithoutRedemptionsInput, promotionUncheckedCreateWithoutRedemptionsInput>
    connectOrCreate?: promotionCreateOrConnectWithoutRedemptionsInput
    upsert?: promotionUpsertWithoutRedemptionsInput
    connect?: promotionWhereUniqueInput
    update?: XOR<XOR<promotionUpdateToOneWithWhereWithoutRedemptionsInput, promotionUpdateWithoutRedemptionsInput>, promotionUncheckedUpdateWithoutRedemptionsInput>
  }

  export type userUpdateOneWithoutPromotionredemptionNestedInput = {
    create?: XOR<userCreateWithoutPromotionredemptionInput, userUncheckedCreateWithoutPromotionredemptionInput>
    connectOrCreate?: userCreateOrConnectWithoutPromotionredemptionInput
    upsert?: userUpsertWithoutPromotionredemptionInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutPromotionredemptionInput, userUpdateWithoutPromotionredemptionInput>, userUncheckedUpdateWithoutPromotionredemptionInput>
  }

  export type orderUpdateOneWithoutPromotionredemptionNestedInput = {
    create?: XOR<orderCreateWithoutPromotionredemptionInput, orderUncheckedCreateWithoutPromotionredemptionInput>
    connectOrCreate?: orderCreateOrConnectWithoutPromotionredemptionInput
    upsert?: orderUpsertWithoutPromotionredemptionInput
    disconnect?: orderWhereInput | boolean
    delete?: orderWhereInput | boolean
    connect?: orderWhereUniqueInput
    update?: XOR<XOR<orderUpdateToOneWithWhereWithoutPromotionredemptionInput, orderUpdateWithoutPromotionredemptionInput>, orderUncheckedUpdateWithoutPromotionredemptionInput>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type showtimeCreateWithoutMovieInput = {
    id?: bigint | number
    theater: string
    startsAt: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    order?: orderCreateNestedManyWithoutShowtimeInput
    seatlock?: seatlockCreateNestedManyWithoutShowtimeInput
  }

  export type showtimeUncheckedCreateWithoutMovieInput = {
    id?: bigint | number
    theater: string
    startsAt: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    order?: orderUncheckedCreateNestedManyWithoutShowtimeInput
    seatlock?: seatlockUncheckedCreateNestedManyWithoutShowtimeInput
  }

  export type showtimeCreateOrConnectWithoutMovieInput = {
    where: showtimeWhereUniqueInput
    create: XOR<showtimeCreateWithoutMovieInput, showtimeUncheckedCreateWithoutMovieInput>
  }

  export type showtimeCreateManyMovieInputEnvelope = {
    data: showtimeCreateManyMovieInput | showtimeCreateManyMovieInput[]
    skipDuplicates?: boolean
  }

  export type showtimeUpsertWithWhereUniqueWithoutMovieInput = {
    where: showtimeWhereUniqueInput
    update: XOR<showtimeUpdateWithoutMovieInput, showtimeUncheckedUpdateWithoutMovieInput>
    create: XOR<showtimeCreateWithoutMovieInput, showtimeUncheckedCreateWithoutMovieInput>
  }

  export type showtimeUpdateWithWhereUniqueWithoutMovieInput = {
    where: showtimeWhereUniqueInput
    data: XOR<showtimeUpdateWithoutMovieInput, showtimeUncheckedUpdateWithoutMovieInput>
  }

  export type showtimeUpdateManyWithWhereWithoutMovieInput = {
    where: showtimeScalarWhereInput
    data: XOR<showtimeUpdateManyMutationInput, showtimeUncheckedUpdateManyWithoutMovieInput>
  }

  export type showtimeScalarWhereInput = {
    AND?: showtimeScalarWhereInput | showtimeScalarWhereInput[]
    OR?: showtimeScalarWhereInput[]
    NOT?: showtimeScalarWhereInput | showtimeScalarWhereInput[]
    id?: BigIntFilter<"showtime"> | bigint | number
    movieId?: BigIntFilter<"showtime"> | bigint | number
    theater?: StringFilter<"showtime"> | string
    startsAt?: DateTimeFilter<"showtime"> | Date | string
    basePrice?: DecimalFilter<"showtime"> | Decimal | DecimalJsLike | number | string
  }

  export type showtimeCreateWithoutOrderInput = {
    id?: bigint | number
    theater: string
    startsAt: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    seatlock?: seatlockCreateNestedManyWithoutShowtimeInput
    movie: movieCreateNestedOneWithoutShowtimeInput
  }

  export type showtimeUncheckedCreateWithoutOrderInput = {
    id?: bigint | number
    movieId: bigint | number
    theater: string
    startsAt: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    seatlock?: seatlockUncheckedCreateNestedManyWithoutShowtimeInput
  }

  export type showtimeCreateOrConnectWithoutOrderInput = {
    where: showtimeWhereUniqueInput
    create: XOR<showtimeCreateWithoutOrderInput, showtimeUncheckedCreateWithoutOrderInput>
  }

  export type userCreateWithoutOrdersInput = {
    id?: bigint | number
    email: string
    passwordHash: string
    displayName?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    passwordresettoken?: passwordresettokenCreateNestedManyWithoutUserInput
    promotionredemption?: promotionredemptionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutOrdersInput = {
    id?: bigint | number
    email: string
    passwordHash: string
    displayName?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    passwordresettoken?: passwordresettokenUncheckedCreateNestedManyWithoutUserInput
    promotionredemption?: promotionredemptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutOrdersInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
  }

  export type ticketCreateWithoutOrderInput = {
    id?: bigint | number
    seatLabel: string
    price: number
    createdAt?: Date | string
  }

  export type ticketUncheckedCreateWithoutOrderInput = {
    id?: bigint | number
    seatLabel: string
    price: number
    createdAt?: Date | string
  }

  export type ticketCreateOrConnectWithoutOrderInput = {
    where: ticketWhereUniqueInput
    create: XOR<ticketCreateWithoutOrderInput, ticketUncheckedCreateWithoutOrderInput>
  }

  export type ticketCreateManyOrderInputEnvelope = {
    data: ticketCreateManyOrderInput | ticketCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type promotionredemptionCreateWithoutOrderInput = {
    id?: bigint | number
    email?: string | null
    redeemedAt?: Date | string
    promotion: promotionCreateNestedOneWithoutRedemptionsInput
    user?: userCreateNestedOneWithoutPromotionredemptionInput
  }

  export type promotionredemptionUncheckedCreateWithoutOrderInput = {
    id?: bigint | number
    promotionId: bigint | number
    userId?: bigint | number | null
    email?: string | null
    redeemedAt?: Date | string
  }

  export type promotionredemptionCreateOrConnectWithoutOrderInput = {
    where: promotionredemptionWhereUniqueInput
    create: XOR<promotionredemptionCreateWithoutOrderInput, promotionredemptionUncheckedCreateWithoutOrderInput>
  }

  export type promotionredemptionCreateManyOrderInputEnvelope = {
    data: promotionredemptionCreateManyOrderInput | promotionredemptionCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type showtimeUpsertWithoutOrderInput = {
    update: XOR<showtimeUpdateWithoutOrderInput, showtimeUncheckedUpdateWithoutOrderInput>
    create: XOR<showtimeCreateWithoutOrderInput, showtimeUncheckedCreateWithoutOrderInput>
    where?: showtimeWhereInput
  }

  export type showtimeUpdateToOneWithWhereWithoutOrderInput = {
    where?: showtimeWhereInput
    data: XOR<showtimeUpdateWithoutOrderInput, showtimeUncheckedUpdateWithoutOrderInput>
  }

  export type showtimeUpdateWithoutOrderInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    seatlock?: seatlockUpdateManyWithoutShowtimeNestedInput
    movie?: movieUpdateOneRequiredWithoutShowtimeNestedInput
  }

  export type showtimeUncheckedUpdateWithoutOrderInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    movieId?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    seatlock?: seatlockUncheckedUpdateManyWithoutShowtimeNestedInput
  }

  export type userUpsertWithoutOrdersInput = {
    update: XOR<userUpdateWithoutOrdersInput, userUncheckedUpdateWithoutOrdersInput>
    create: XOR<userCreateWithoutOrdersInput, userUncheckedCreateWithoutOrdersInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutOrdersInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutOrdersInput, userUncheckedUpdateWithoutOrdersInput>
  }

  export type userUpdateWithoutOrdersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordresettoken?: passwordresettokenUpdateManyWithoutUserNestedInput
    promotionredemption?: promotionredemptionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutOrdersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordresettoken?: passwordresettokenUncheckedUpdateManyWithoutUserNestedInput
    promotionredemption?: promotionredemptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ticketUpsertWithWhereUniqueWithoutOrderInput = {
    where: ticketWhereUniqueInput
    update: XOR<ticketUpdateWithoutOrderInput, ticketUncheckedUpdateWithoutOrderInput>
    create: XOR<ticketCreateWithoutOrderInput, ticketUncheckedCreateWithoutOrderInput>
  }

  export type ticketUpdateWithWhereUniqueWithoutOrderInput = {
    where: ticketWhereUniqueInput
    data: XOR<ticketUpdateWithoutOrderInput, ticketUncheckedUpdateWithoutOrderInput>
  }

  export type ticketUpdateManyWithWhereWithoutOrderInput = {
    where: ticketScalarWhereInput
    data: XOR<ticketUpdateManyMutationInput, ticketUncheckedUpdateManyWithoutOrderInput>
  }

  export type ticketScalarWhereInput = {
    AND?: ticketScalarWhereInput | ticketScalarWhereInput[]
    OR?: ticketScalarWhereInput[]
    NOT?: ticketScalarWhereInput | ticketScalarWhereInput[]
    id?: BigIntFilter<"ticket"> | bigint | number
    seatLabel?: StringFilter<"ticket"> | string
    price?: FloatFilter<"ticket"> | number
    createdAt?: DateTimeFilter<"ticket"> | Date | string
    orderId?: BigIntFilter<"ticket"> | bigint | number
  }

  export type promotionredemptionUpsertWithWhereUniqueWithoutOrderInput = {
    where: promotionredemptionWhereUniqueInput
    update: XOR<promotionredemptionUpdateWithoutOrderInput, promotionredemptionUncheckedUpdateWithoutOrderInput>
    create: XOR<promotionredemptionCreateWithoutOrderInput, promotionredemptionUncheckedCreateWithoutOrderInput>
  }

  export type promotionredemptionUpdateWithWhereUniqueWithoutOrderInput = {
    where: promotionredemptionWhereUniqueInput
    data: XOR<promotionredemptionUpdateWithoutOrderInput, promotionredemptionUncheckedUpdateWithoutOrderInput>
  }

  export type promotionredemptionUpdateManyWithWhereWithoutOrderInput = {
    where: promotionredemptionScalarWhereInput
    data: XOR<promotionredemptionUpdateManyMutationInput, promotionredemptionUncheckedUpdateManyWithoutOrderInput>
  }

  export type promotionredemptionScalarWhereInput = {
    AND?: promotionredemptionScalarWhereInput | promotionredemptionScalarWhereInput[]
    OR?: promotionredemptionScalarWhereInput[]
    NOT?: promotionredemptionScalarWhereInput | promotionredemptionScalarWhereInput[]
    id?: BigIntFilter<"promotionredemption"> | bigint | number
    promotionId?: BigIntFilter<"promotionredemption"> | bigint | number
    userId?: BigIntNullableFilter<"promotionredemption"> | bigint | number | null
    orderId?: BigIntNullableFilter<"promotionredemption"> | bigint | number | null
    email?: StringNullableFilter<"promotionredemption"> | string | null
    redeemedAt?: DateTimeFilter<"promotionredemption"> | Date | string
  }

  export type userCreateWithoutPasswordresettokenInput = {
    id?: bigint | number
    email: string
    passwordHash: string
    displayName?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    orders?: orderCreateNestedManyWithoutUserInput
    promotionredemption?: promotionredemptionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutPasswordresettokenInput = {
    id?: bigint | number
    email: string
    passwordHash: string
    displayName?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    orders?: orderUncheckedCreateNestedManyWithoutUserInput
    promotionredemption?: promotionredemptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutPasswordresettokenInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutPasswordresettokenInput, userUncheckedCreateWithoutPasswordresettokenInput>
  }

  export type userUpsertWithoutPasswordresettokenInput = {
    update: XOR<userUpdateWithoutPasswordresettokenInput, userUncheckedUpdateWithoutPasswordresettokenInput>
    create: XOR<userCreateWithoutPasswordresettokenInput, userUncheckedCreateWithoutPasswordresettokenInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutPasswordresettokenInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutPasswordresettokenInput, userUncheckedUpdateWithoutPasswordresettokenInput>
  }

  export type userUpdateWithoutPasswordresettokenInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: orderUpdateManyWithoutUserNestedInput
    promotionredemption?: promotionredemptionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutPasswordresettokenInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: orderUncheckedUpdateManyWithoutUserNestedInput
    promotionredemption?: promotionredemptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type showtimeCreateWithoutSeatlockInput = {
    id?: bigint | number
    theater: string
    startsAt: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    order?: orderCreateNestedManyWithoutShowtimeInput
    movie: movieCreateNestedOneWithoutShowtimeInput
  }

  export type showtimeUncheckedCreateWithoutSeatlockInput = {
    id?: bigint | number
    movieId: bigint | number
    theater: string
    startsAt: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    order?: orderUncheckedCreateNestedManyWithoutShowtimeInput
  }

  export type showtimeCreateOrConnectWithoutSeatlockInput = {
    where: showtimeWhereUniqueInput
    create: XOR<showtimeCreateWithoutSeatlockInput, showtimeUncheckedCreateWithoutSeatlockInput>
  }

  export type showtimeUpsertWithoutSeatlockInput = {
    update: XOR<showtimeUpdateWithoutSeatlockInput, showtimeUncheckedUpdateWithoutSeatlockInput>
    create: XOR<showtimeCreateWithoutSeatlockInput, showtimeUncheckedCreateWithoutSeatlockInput>
    where?: showtimeWhereInput
  }

  export type showtimeUpdateToOneWithWhereWithoutSeatlockInput = {
    where?: showtimeWhereInput
    data: XOR<showtimeUpdateWithoutSeatlockInput, showtimeUncheckedUpdateWithoutSeatlockInput>
  }

  export type showtimeUpdateWithoutSeatlockInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order?: orderUpdateManyWithoutShowtimeNestedInput
    movie?: movieUpdateOneRequiredWithoutShowtimeNestedInput
  }

  export type showtimeUncheckedUpdateWithoutSeatlockInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    movieId?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order?: orderUncheckedUpdateManyWithoutShowtimeNestedInput
  }

  export type orderCreateWithoutShowtimeInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    buyerEmail?: string | null
    user?: userCreateNestedOneWithoutOrdersInput
    tickets?: ticketCreateNestedManyWithoutOrderInput
    promotionredemption?: promotionredemptionCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutShowtimeInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    userId?: bigint | number | null
    buyerEmail?: string | null
    tickets?: ticketUncheckedCreateNestedManyWithoutOrderInput
    promotionredemption?: promotionredemptionUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderCreateOrConnectWithoutShowtimeInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutShowtimeInput, orderUncheckedCreateWithoutShowtimeInput>
  }

  export type orderCreateManyShowtimeInputEnvelope = {
    data: orderCreateManyShowtimeInput | orderCreateManyShowtimeInput[]
    skipDuplicates?: boolean
  }

  export type seatlockCreateWithoutShowtimeInput = {
    seatLabel: string
    lockedUntil: Date | string
    refCode: string
  }

  export type seatlockUncheckedCreateWithoutShowtimeInput = {
    seatLabel: string
    lockedUntil: Date | string
    refCode: string
  }

  export type seatlockCreateOrConnectWithoutShowtimeInput = {
    where: seatlockWhereUniqueInput
    create: XOR<seatlockCreateWithoutShowtimeInput, seatlockUncheckedCreateWithoutShowtimeInput>
  }

  export type seatlockCreateManyShowtimeInputEnvelope = {
    data: seatlockCreateManyShowtimeInput | seatlockCreateManyShowtimeInput[]
    skipDuplicates?: boolean
  }

  export type movieCreateWithoutShowtimeInput = {
    id?: bigint | number
    title: string
    durationMin: number
    rating?: string | null
    createdAt?: Date | string
    posterUrl?: string | null
    overview?: string | null
    active?: boolean
  }

  export type movieUncheckedCreateWithoutShowtimeInput = {
    id?: bigint | number
    title: string
    durationMin: number
    rating?: string | null
    createdAt?: Date | string
    posterUrl?: string | null
    overview?: string | null
    active?: boolean
  }

  export type movieCreateOrConnectWithoutShowtimeInput = {
    where: movieWhereUniqueInput
    create: XOR<movieCreateWithoutShowtimeInput, movieUncheckedCreateWithoutShowtimeInput>
  }

  export type orderUpsertWithWhereUniqueWithoutShowtimeInput = {
    where: orderWhereUniqueInput
    update: XOR<orderUpdateWithoutShowtimeInput, orderUncheckedUpdateWithoutShowtimeInput>
    create: XOR<orderCreateWithoutShowtimeInput, orderUncheckedCreateWithoutShowtimeInput>
  }

  export type orderUpdateWithWhereUniqueWithoutShowtimeInput = {
    where: orderWhereUniqueInput
    data: XOR<orderUpdateWithoutShowtimeInput, orderUncheckedUpdateWithoutShowtimeInput>
  }

  export type orderUpdateManyWithWhereWithoutShowtimeInput = {
    where: orderScalarWhereInput
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyWithoutShowtimeInput>
  }

  export type orderScalarWhereInput = {
    AND?: orderScalarWhereInput | orderScalarWhereInput[]
    OR?: orderScalarWhereInput[]
    NOT?: orderScalarWhereInput | orderScalarWhereInput[]
    id?: BigIntFilter<"order"> | bigint | number
    refCode?: StringFilter<"order"> | string
    status?: StringFilter<"order"> | string
    totalAmount?: FloatFilter<"order"> | number
    discountAmt?: FloatFilter<"order"> | number
    promoCode?: StringNullableFilter<"order"> | string | null
    paidAt?: DateTimeNullableFilter<"order"> | Date | string | null
    createdAt?: DateTimeFilter<"order"> | Date | string
    showtimeId?: BigIntFilter<"order"> | bigint | number
    userId?: BigIntNullableFilter<"order"> | bigint | number | null
    buyerEmail?: StringNullableFilter<"order"> | string | null
  }

  export type seatlockUpsertWithWhereUniqueWithoutShowtimeInput = {
    where: seatlockWhereUniqueInput
    update: XOR<seatlockUpdateWithoutShowtimeInput, seatlockUncheckedUpdateWithoutShowtimeInput>
    create: XOR<seatlockCreateWithoutShowtimeInput, seatlockUncheckedCreateWithoutShowtimeInput>
  }

  export type seatlockUpdateWithWhereUniqueWithoutShowtimeInput = {
    where: seatlockWhereUniqueInput
    data: XOR<seatlockUpdateWithoutShowtimeInput, seatlockUncheckedUpdateWithoutShowtimeInput>
  }

  export type seatlockUpdateManyWithWhereWithoutShowtimeInput = {
    where: seatlockScalarWhereInput
    data: XOR<seatlockUpdateManyMutationInput, seatlockUncheckedUpdateManyWithoutShowtimeInput>
  }

  export type seatlockScalarWhereInput = {
    AND?: seatlockScalarWhereInput | seatlockScalarWhereInput[]
    OR?: seatlockScalarWhereInput[]
    NOT?: seatlockScalarWhereInput | seatlockScalarWhereInput[]
    showtimeId?: BigIntFilter<"seatlock"> | bigint | number
    seatLabel?: StringFilter<"seatlock"> | string
    lockedUntil?: DateTimeFilter<"seatlock"> | Date | string
    refCode?: StringFilter<"seatlock"> | string
  }

  export type movieUpsertWithoutShowtimeInput = {
    update: XOR<movieUpdateWithoutShowtimeInput, movieUncheckedUpdateWithoutShowtimeInput>
    create: XOR<movieCreateWithoutShowtimeInput, movieUncheckedCreateWithoutShowtimeInput>
    where?: movieWhereInput
  }

  export type movieUpdateToOneWithWhereWithoutShowtimeInput = {
    where?: movieWhereInput
    data: XOR<movieUpdateWithoutShowtimeInput, movieUncheckedUpdateWithoutShowtimeInput>
  }

  export type movieUpdateWithoutShowtimeInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type movieUncheckedUpdateWithoutShowtimeInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    overview?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type orderCreateWithoutTicketsInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    buyerEmail?: string | null
    showtime: showtimeCreateNestedOneWithoutOrderInput
    user?: userCreateNestedOneWithoutOrdersInput
    promotionredemption?: promotionredemptionCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutTicketsInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    showtimeId: bigint | number
    userId?: bigint | number | null
    buyerEmail?: string | null
    promotionredemption?: promotionredemptionUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderCreateOrConnectWithoutTicketsInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutTicketsInput, orderUncheckedCreateWithoutTicketsInput>
  }

  export type orderUpsertWithoutTicketsInput = {
    update: XOR<orderUpdateWithoutTicketsInput, orderUncheckedUpdateWithoutTicketsInput>
    create: XOR<orderCreateWithoutTicketsInput, orderUncheckedCreateWithoutTicketsInput>
    where?: orderWhereInput
  }

  export type orderUpdateToOneWithWhereWithoutTicketsInput = {
    where?: orderWhereInput
    data: XOR<orderUpdateWithoutTicketsInput, orderUncheckedUpdateWithoutTicketsInput>
  }

  export type orderUpdateWithoutTicketsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    showtime?: showtimeUpdateOneRequiredWithoutOrderNestedInput
    user?: userUpdateOneWithoutOrdersNestedInput
    promotionredemption?: promotionredemptionUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutTicketsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    showtimeId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    promotionredemption?: promotionredemptionUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type orderCreateWithoutUserInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    buyerEmail?: string | null
    showtime: showtimeCreateNestedOneWithoutOrderInput
    tickets?: ticketCreateNestedManyWithoutOrderInput
    promotionredemption?: promotionredemptionCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    showtimeId: bigint | number
    buyerEmail?: string | null
    tickets?: ticketUncheckedCreateNestedManyWithoutOrderInput
    promotionredemption?: promotionredemptionUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderCreateOrConnectWithoutUserInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput>
  }

  export type orderCreateManyUserInputEnvelope = {
    data: orderCreateManyUserInput | orderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type passwordresettokenCreateWithoutUserInput = {
    id?: bigint | number
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type passwordresettokenUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type passwordresettokenCreateOrConnectWithoutUserInput = {
    where: passwordresettokenWhereUniqueInput
    create: XOR<passwordresettokenCreateWithoutUserInput, passwordresettokenUncheckedCreateWithoutUserInput>
  }

  export type passwordresettokenCreateManyUserInputEnvelope = {
    data: passwordresettokenCreateManyUserInput | passwordresettokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type promotionredemptionCreateWithoutUserInput = {
    id?: bigint | number
    email?: string | null
    redeemedAt?: Date | string
    promotion: promotionCreateNestedOneWithoutRedemptionsInput
    order?: orderCreateNestedOneWithoutPromotionredemptionInput
  }

  export type promotionredemptionUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    promotionId: bigint | number
    orderId?: bigint | number | null
    email?: string | null
    redeemedAt?: Date | string
  }

  export type promotionredemptionCreateOrConnectWithoutUserInput = {
    where: promotionredemptionWhereUniqueInput
    create: XOR<promotionredemptionCreateWithoutUserInput, promotionredemptionUncheckedCreateWithoutUserInput>
  }

  export type promotionredemptionCreateManyUserInputEnvelope = {
    data: promotionredemptionCreateManyUserInput | promotionredemptionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type orderUpsertWithWhereUniqueWithoutUserInput = {
    where: orderWhereUniqueInput
    update: XOR<orderUpdateWithoutUserInput, orderUncheckedUpdateWithoutUserInput>
    create: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput>
  }

  export type orderUpdateWithWhereUniqueWithoutUserInput = {
    where: orderWhereUniqueInput
    data: XOR<orderUpdateWithoutUserInput, orderUncheckedUpdateWithoutUserInput>
  }

  export type orderUpdateManyWithWhereWithoutUserInput = {
    where: orderScalarWhereInput
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyWithoutUserInput>
  }

  export type passwordresettokenUpsertWithWhereUniqueWithoutUserInput = {
    where: passwordresettokenWhereUniqueInput
    update: XOR<passwordresettokenUpdateWithoutUserInput, passwordresettokenUncheckedUpdateWithoutUserInput>
    create: XOR<passwordresettokenCreateWithoutUserInput, passwordresettokenUncheckedCreateWithoutUserInput>
  }

  export type passwordresettokenUpdateWithWhereUniqueWithoutUserInput = {
    where: passwordresettokenWhereUniqueInput
    data: XOR<passwordresettokenUpdateWithoutUserInput, passwordresettokenUncheckedUpdateWithoutUserInput>
  }

  export type passwordresettokenUpdateManyWithWhereWithoutUserInput = {
    where: passwordresettokenScalarWhereInput
    data: XOR<passwordresettokenUpdateManyMutationInput, passwordresettokenUncheckedUpdateManyWithoutUserInput>
  }

  export type passwordresettokenScalarWhereInput = {
    AND?: passwordresettokenScalarWhereInput | passwordresettokenScalarWhereInput[]
    OR?: passwordresettokenScalarWhereInput[]
    NOT?: passwordresettokenScalarWhereInput | passwordresettokenScalarWhereInput[]
    id?: BigIntFilter<"passwordresettoken"> | bigint | number
    userId?: BigIntFilter<"passwordresettoken"> | bigint | number
    token?: StringFilter<"passwordresettoken"> | string
    expiresAt?: DateTimeFilter<"passwordresettoken"> | Date | string
    used?: BoolFilter<"passwordresettoken"> | boolean
    createdAt?: DateTimeFilter<"passwordresettoken"> | Date | string
  }

  export type promotionredemptionUpsertWithWhereUniqueWithoutUserInput = {
    where: promotionredemptionWhereUniqueInput
    update: XOR<promotionredemptionUpdateWithoutUserInput, promotionredemptionUncheckedUpdateWithoutUserInput>
    create: XOR<promotionredemptionCreateWithoutUserInput, promotionredemptionUncheckedCreateWithoutUserInput>
  }

  export type promotionredemptionUpdateWithWhereUniqueWithoutUserInput = {
    where: promotionredemptionWhereUniqueInput
    data: XOR<promotionredemptionUpdateWithoutUserInput, promotionredemptionUncheckedUpdateWithoutUserInput>
  }

  export type promotionredemptionUpdateManyWithWhereWithoutUserInput = {
    where: promotionredemptionScalarWhereInput
    data: XOR<promotionredemptionUpdateManyMutationInput, promotionredemptionUncheckedUpdateManyWithoutUserInput>
  }

  export type promotionredemptionCreateWithoutPromotionInput = {
    id?: bigint | number
    email?: string | null
    redeemedAt?: Date | string
    user?: userCreateNestedOneWithoutPromotionredemptionInput
    order?: orderCreateNestedOneWithoutPromotionredemptionInput
  }

  export type promotionredemptionUncheckedCreateWithoutPromotionInput = {
    id?: bigint | number
    userId?: bigint | number | null
    orderId?: bigint | number | null
    email?: string | null
    redeemedAt?: Date | string
  }

  export type promotionredemptionCreateOrConnectWithoutPromotionInput = {
    where: promotionredemptionWhereUniqueInput
    create: XOR<promotionredemptionCreateWithoutPromotionInput, promotionredemptionUncheckedCreateWithoutPromotionInput>
  }

  export type promotionredemptionCreateManyPromotionInputEnvelope = {
    data: promotionredemptionCreateManyPromotionInput | promotionredemptionCreateManyPromotionInput[]
    skipDuplicates?: boolean
  }

  export type promotionredemptionUpsertWithWhereUniqueWithoutPromotionInput = {
    where: promotionredemptionWhereUniqueInput
    update: XOR<promotionredemptionUpdateWithoutPromotionInput, promotionredemptionUncheckedUpdateWithoutPromotionInput>
    create: XOR<promotionredemptionCreateWithoutPromotionInput, promotionredemptionUncheckedCreateWithoutPromotionInput>
  }

  export type promotionredemptionUpdateWithWhereUniqueWithoutPromotionInput = {
    where: promotionredemptionWhereUniqueInput
    data: XOR<promotionredemptionUpdateWithoutPromotionInput, promotionredemptionUncheckedUpdateWithoutPromotionInput>
  }

  export type promotionredemptionUpdateManyWithWhereWithoutPromotionInput = {
    where: promotionredemptionScalarWhereInput
    data: XOR<promotionredemptionUpdateManyMutationInput, promotionredemptionUncheckedUpdateManyWithoutPromotionInput>
  }

  export type promotionCreateWithoutRedemptionsInput = {
    id?: bigint | number
    code: string
    type: string
    value: number
    maxDiscount?: number | null
    minSpend?: number | null
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    usageLimit?: number | null
    usagePerUser?: number | null
    active?: boolean
    createdAt?: Date | string
  }

  export type promotionUncheckedCreateWithoutRedemptionsInput = {
    id?: bigint | number
    code: string
    type: string
    value: number
    maxDiscount?: number | null
    minSpend?: number | null
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    usageLimit?: number | null
    usagePerUser?: number | null
    active?: boolean
    createdAt?: Date | string
  }

  export type promotionCreateOrConnectWithoutRedemptionsInput = {
    where: promotionWhereUniqueInput
    create: XOR<promotionCreateWithoutRedemptionsInput, promotionUncheckedCreateWithoutRedemptionsInput>
  }

  export type userCreateWithoutPromotionredemptionInput = {
    id?: bigint | number
    email: string
    passwordHash: string
    displayName?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    orders?: orderCreateNestedManyWithoutUserInput
    passwordresettoken?: passwordresettokenCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutPromotionredemptionInput = {
    id?: bigint | number
    email: string
    passwordHash: string
    displayName?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    orders?: orderUncheckedCreateNestedManyWithoutUserInput
    passwordresettoken?: passwordresettokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutPromotionredemptionInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutPromotionredemptionInput, userUncheckedCreateWithoutPromotionredemptionInput>
  }

  export type orderCreateWithoutPromotionredemptionInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    buyerEmail?: string | null
    showtime: showtimeCreateNestedOneWithoutOrderInput
    user?: userCreateNestedOneWithoutOrdersInput
    tickets?: ticketCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutPromotionredemptionInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    showtimeId: bigint | number
    userId?: bigint | number | null
    buyerEmail?: string | null
    tickets?: ticketUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderCreateOrConnectWithoutPromotionredemptionInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutPromotionredemptionInput, orderUncheckedCreateWithoutPromotionredemptionInput>
  }

  export type promotionUpsertWithoutRedemptionsInput = {
    update: XOR<promotionUpdateWithoutRedemptionsInput, promotionUncheckedUpdateWithoutRedemptionsInput>
    create: XOR<promotionCreateWithoutRedemptionsInput, promotionUncheckedCreateWithoutRedemptionsInput>
    where?: promotionWhereInput
  }

  export type promotionUpdateToOneWithWhereWithoutRedemptionsInput = {
    where?: promotionWhereInput
    data: XOR<promotionUpdateWithoutRedemptionsInput, promotionUncheckedUpdateWithoutRedemptionsInput>
  }

  export type promotionUpdateWithoutRedemptionsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    maxDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    minSpend?: NullableFloatFieldUpdateOperationsInput | number | null
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usagePerUser?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionUncheckedUpdateWithoutRedemptionsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    maxDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    minSpend?: NullableFloatFieldUpdateOperationsInput | number | null
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usagePerUser?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUpsertWithoutPromotionredemptionInput = {
    update: XOR<userUpdateWithoutPromotionredemptionInput, userUncheckedUpdateWithoutPromotionredemptionInput>
    create: XOR<userCreateWithoutPromotionredemptionInput, userUncheckedCreateWithoutPromotionredemptionInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutPromotionredemptionInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutPromotionredemptionInput, userUncheckedUpdateWithoutPromotionredemptionInput>
  }

  export type userUpdateWithoutPromotionredemptionInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: orderUpdateManyWithoutUserNestedInput
    passwordresettoken?: passwordresettokenUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutPromotionredemptionInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: orderUncheckedUpdateManyWithoutUserNestedInput
    passwordresettoken?: passwordresettokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type orderUpsertWithoutPromotionredemptionInput = {
    update: XOR<orderUpdateWithoutPromotionredemptionInput, orderUncheckedUpdateWithoutPromotionredemptionInput>
    create: XOR<orderCreateWithoutPromotionredemptionInput, orderUncheckedCreateWithoutPromotionredemptionInput>
    where?: orderWhereInput
  }

  export type orderUpdateToOneWithWhereWithoutPromotionredemptionInput = {
    where?: orderWhereInput
    data: XOR<orderUpdateWithoutPromotionredemptionInput, orderUncheckedUpdateWithoutPromotionredemptionInput>
  }

  export type orderUpdateWithoutPromotionredemptionInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    showtime?: showtimeUpdateOneRequiredWithoutOrderNestedInput
    user?: userUpdateOneWithoutOrdersNestedInput
    tickets?: ticketUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutPromotionredemptionInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    showtimeId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tickets?: ticketUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type showtimeCreateManyMovieInput = {
    id?: bigint | number
    theater: string
    startsAt: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
  }

  export type showtimeUpdateWithoutMovieInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order?: orderUpdateManyWithoutShowtimeNestedInput
    seatlock?: seatlockUpdateManyWithoutShowtimeNestedInput
  }

  export type showtimeUncheckedUpdateWithoutMovieInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order?: orderUncheckedUpdateManyWithoutShowtimeNestedInput
    seatlock?: seatlockUncheckedUpdateManyWithoutShowtimeNestedInput
  }

  export type showtimeUncheckedUpdateManyWithoutMovieInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    theater?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ticketCreateManyOrderInput = {
    id?: bigint | number
    seatLabel: string
    price: number
    createdAt?: Date | string
  }

  export type promotionredemptionCreateManyOrderInput = {
    id?: bigint | number
    promotionId: bigint | number
    userId?: bigint | number | null
    email?: string | null
    redeemedAt?: Date | string
  }

  export type ticketUpdateWithoutOrderInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    seatLabel?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketUncheckedUpdateWithoutOrderInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    seatLabel?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketUncheckedUpdateManyWithoutOrderInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    seatLabel?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionredemptionUpdateWithoutOrderInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    promotion?: promotionUpdateOneRequiredWithoutRedemptionsNestedInput
    user?: userUpdateOneWithoutPromotionredemptionNestedInput
  }

  export type promotionredemptionUncheckedUpdateWithoutOrderInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    promotionId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionredemptionUncheckedUpdateManyWithoutOrderInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    promotionId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderCreateManyShowtimeInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    userId?: bigint | number | null
    buyerEmail?: string | null
  }

  export type seatlockCreateManyShowtimeInput = {
    seatLabel: string
    lockedUntil: Date | string
    refCode: string
  }

  export type orderUpdateWithoutShowtimeInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneWithoutOrdersNestedInput
    tickets?: ticketUpdateManyWithoutOrderNestedInput
    promotionredemption?: promotionredemptionUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutShowtimeInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tickets?: ticketUncheckedUpdateManyWithoutOrderNestedInput
    promotionredemption?: promotionredemptionUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateManyWithoutShowtimeInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type seatlockUpdateWithoutShowtimeInput = {
    seatLabel?: StringFieldUpdateOperationsInput | string
    lockedUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    refCode?: StringFieldUpdateOperationsInput | string
  }

  export type seatlockUncheckedUpdateWithoutShowtimeInput = {
    seatLabel?: StringFieldUpdateOperationsInput | string
    lockedUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    refCode?: StringFieldUpdateOperationsInput | string
  }

  export type seatlockUncheckedUpdateManyWithoutShowtimeInput = {
    seatLabel?: StringFieldUpdateOperationsInput | string
    lockedUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    refCode?: StringFieldUpdateOperationsInput | string
  }

  export type orderCreateManyUserInput = {
    id?: bigint | number
    refCode: string
    status: string
    totalAmount: number
    discountAmt?: number
    promoCode?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    showtimeId: bigint | number
    buyerEmail?: string | null
  }

  export type passwordresettokenCreateManyUserInput = {
    id?: bigint | number
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type promotionredemptionCreateManyUserInput = {
    id?: bigint | number
    promotionId: bigint | number
    orderId?: bigint | number | null
    email?: string | null
    redeemedAt?: Date | string
  }

  export type orderUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    showtime?: showtimeUpdateOneRequiredWithoutOrderNestedInput
    tickets?: ticketUpdateManyWithoutOrderNestedInput
    promotionredemption?: promotionredemptionUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    showtimeId?: BigIntFieldUpdateOperationsInput | bigint | number
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tickets?: ticketUncheckedUpdateManyWithoutOrderNestedInput
    promotionredemption?: promotionredemptionUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    refCode?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    discountAmt?: FloatFieldUpdateOperationsInput | number
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    showtimeId?: BigIntFieldUpdateOperationsInput | bigint | number
    buyerEmail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type passwordresettokenUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type passwordresettokenUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type passwordresettokenUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionredemptionUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    promotion?: promotionUpdateOneRequiredWithoutRedemptionsNestedInput
    order?: orderUpdateOneWithoutPromotionredemptionNestedInput
  }

  export type promotionredemptionUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    promotionId?: BigIntFieldUpdateOperationsInput | bigint | number
    orderId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionredemptionUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    promotionId?: BigIntFieldUpdateOperationsInput | bigint | number
    orderId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionredemptionCreateManyPromotionInput = {
    id?: bigint | number
    userId?: bigint | number | null
    orderId?: bigint | number | null
    email?: string | null
    redeemedAt?: Date | string
  }

  export type promotionredemptionUpdateWithoutPromotionInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutPromotionredemptionNestedInput
    order?: orderUpdateOneWithoutPromotionredemptionNestedInput
  }

  export type promotionredemptionUncheckedUpdateWithoutPromotionInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orderId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionredemptionUncheckedUpdateManyWithoutPromotionInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orderId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    redeemedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use MovieCountOutputTypeDefaultArgs instead
     */
    export type MovieCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovieCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShowtimeCountOutputTypeDefaultArgs instead
     */
    export type ShowtimeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShowtimeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PromotionCountOutputTypeDefaultArgs instead
     */
    export type PromotionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PromotionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use movieDefaultArgs instead
     */
    export type movieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = movieDefaultArgs<ExtArgs>
    /**
     * @deprecated Use orderDefaultArgs instead
     */
    export type orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = orderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use passwordresettokenDefaultArgs instead
     */
    export type passwordresettokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = passwordresettokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use seatlockDefaultArgs instead
     */
    export type seatlockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = seatlockDefaultArgs<ExtArgs>
    /**
     * @deprecated Use showtimeDefaultArgs instead
     */
    export type showtimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = showtimeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ticketDefaultArgs instead
     */
    export type ticketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ticketDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use promotionDefaultArgs instead
     */
    export type promotionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = promotionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use promotionredemptionDefaultArgs instead
     */
    export type promotionredemptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = promotionredemptionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}